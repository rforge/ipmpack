source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
ax<-growthModelCompVaryInterval(dataf=dff,makePlot=T, ylim=c(-5,15))
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
ax<-growthModelCompVaryInterval(dataf=dff,makePlot=T, ylim=c(-5,15))
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
ax<-growthModelCompVaryInterval(dataf=dff,makePlot=T, ylim=c(-5,15))
#
FigureSix <- function(addpdf=FALSE){#
#
    sp.list <- c("vain", "myda", "hubr")#
    sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
    #
    dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
    dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
#
   #this is the time-adjusted#
     # 1. MECHANISTIC#
    #
    #this is the time-adjusted#
    dff$incr <- dff$sizeNext-dff$size#
#
    ylims1 <- pmax(range(dff$incr[dff$spcode==sp.list[1]],na.rm=TRUE)*c(1,2),-5)#
    ylims2 <- pmax(range(dff$incr[dff$spcode==sp.list[2]],na.rm=TRUE)*c(1,2),-5)#
    ylims3 <- pmax(range(dff$incr[dff$spcode==sp.list[3]],na.rm=TRUE)*c(1,2),-5)#
#
    par(mfrow=c(2,3),bty="l",family = "Helvetica")#
    res1 <- growthModelCompVaryInterval(dff[dff$spcode==sp.list[1],],makePlot=TRUE, ylim=ylims1)#
    if (addpdf) addPdfGrowthPic(respType = "logincr",sizesPlotAt=c(50,200,350)/pi,sizeRange=c(20,400)/pi,incrRange=c(-10,50),#
                    scalar=250,growthObjList=res1[[2]],cols=2:7,cov=1,minShow=0.05,lty=1)#
    res2 <- growthModelCompVaryInterval(dff[dff$spcode==sp.list[2],],makePlot=TRUE,  ylim=ylims2)#
    if (addpdf) addPdfGrowthPic(respType = "logincr",sizesPlotAt=c(40,90,120)/pi,sizeRange=c(20,400)/pi,incrRange=c(-10,50),#
                    scalar=300,growthObjList=res2[[2]],cols=2:7,cov=1,minShow=1,lty=1)#
    res3 <- growthModelCompVaryInterval(dff[dff$spcode==sp.list[3],],makePlot=TRUE,  ylim=ylims3)#
    if (addpdf) addPdfGrowthPic(respType = "logincr",sizesPlotAt=c(20,40,55)/pi,sizeRange=c(20,400)/pi,incrRange=c(-10,50),#
                    scalar=20,growthObjList=res3[[2]],cols=2:7,cov=1,minShow=0.05,lty=1)#
#
#
}
ax<-FigureSix()
 growthModelCompVaryInterval
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
ax<-FigureSix()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a1<-Figure6()
warnings()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a1<-Figure6()
#
    sp.list <- c("vain", "myda", "hubr")#
    sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
#
    #get data#
    dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
    dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
    dff$incr <- dff$sizeNext - dff$size#
#
    survModels <- FigureTwo()#
    growModelsNeg <- FigureThree()#
    growModelsNoNeg <- FigureFour()#
    growModelsMech <- FigureFive()#
    growModelsVaryInt <- FigureSix()
growtModelsVaryInt[[2]]
names(growModelsVaryInt)
names(growModelsVaryInt[[1]])
growModelsVaryInt
 growModelsVaryInt
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a1<-Figure6()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a1<-Figure6()
survModelCompVaryInterval
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
FigureTwo()
survModelCompVaryInterval
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
survModelCompVaryInterval
a1<-FigureTwo()
a1$res1[[1]]
a1$res1[[1]]$logLik
    print(1-pchisq(-2*(a1$res1[[1]]$logLik[1:2]-a1$res1[[1]]$logLik[1:2]),1))
a1$res1[[1]]$logLik[1:2]
    print(1-pchisq(-2*(as.numeric(a1$res1[[1]]$logLik[1:2])-as.numeric(a1$res1[[1]]$logLik[1:2])),1))
    print(1-pchisq(-2*(as.numeric(a1$res2[[1]]$logLik[1:2])-as.numeric(a1$res2[[1]]$logLik[1:2])),1))
    print(1-pchisq(-2*(as.numeric(a1$res3[[1]]$logLik[1:2])-as.numeric(a1$res3[[1]]$logLik[1:2])),1))
as.numeric(a1$res3[[1]]$logLik[1:2])
as.numeric(a1$res3[[1]]$logLik)
a1$res3[[1]]$logLik
a1$res3[[1]]$logLik$val
a1$res3[[1]]$logLik[]
as.numeric(a1$res3[[1]]$logLik[])
a1$res3[[1]]$logLik[1]
as.numeric(a1$res3[[1]]$logLik[1])
a1$res3[[1]][,2]
as.numeric(a1$res3[[1]][,2])
numeric(a1$res3[[1]][,2])
numeric(a1$res3[[1]])
numeric(a1$res3[[1]]$logLik)
as.numeric(a1$res3[[1]]$logLik)
numeric(a1$res3[[1]]$logLik[1])
numeric(a1$res3[[1]]$logLik[2])
as.numeric(as.character(a1$res3[[1]]$logLik[1]))
    print(1-pchisq(-2*(as.numeric(as.character(a1$res1[[1]]$logLik[1:2]))-as.numeric(as.character(a1$res1[[1]]$logLik[1:2])),1)))#
    print(1-pchisq(-2*(as.numeric(as.character(a1$res2[[1]]$logLik[1:2]))-as.numeric(as.character(a1$res2[[1]]$logLik[1:2])),1)))#
    print(1-pchisq(-2*(as.numeric(as.character(a1$res3[[1]]$logLik[1:2]))-as.numeric(as.character(a1$res3[[1]]$logLik[1:2])),1)))
    print(1-pchisq(-2*(as.numeric(as.character(a1$res1[[1]]$logLik[1:2]))-as.numeric(as.character(a1$res1[[1]]$logLik[1:2])),1)))#
    print(1-pchisq(-2*(as.numeric(as.character(a1$res2[[1]]$logLik[1:2]))-as.numeric(as.character(a1$res2[[1]]$logLik[1:2])),1)))#
    print(1-pchisq(-2*(as.numeric(as.character(a1$res3[[1]]$logLik[1:2]))-as.numeric(as.character(a1$res3[[1]]$logLik[1:2]))),1))
    print(1-pchisq(-2*(as.numeric(as.character(a1$res1[[1]]$logLik[1:2]))-as.numeric(as.character(a1$res1[[1]]$logLik[1:2]))),1))#
    print(1-pchisq(-2*(as.numeric(as.character(a1$res2[[1]]$logLik[1:2]))-as.numeric(as.character(a1$res2[[1]]$logLik[1:2]))),1))#
    print(1-pchisq(-2*(as.numeric(as.character(a1$res3[[1]]$logLik[1:2]))-as.numeric(as.character(a1$res3[[1]]$logLik[1:2]))),1))
    print(1-pchisq(-2*(as.numeric(as.character(a1$res1[[1]]$logLik[1:2]))-as.numeric(as.character(a1$res1[[1]]$logLik[2:3]))),1))#
    print(1-pchisq(-2*(as.numeric(as.character(a1$res2[[1]]$logLik[1:2]))-as.numeric(as.character(a1$res2[[1]]$logLik[2:3]))),1))#
    print(1-pchisq(-2*(as.numeric(as.character(a1$res3[[1]]$logLik[1:2]))-as.numeric(as.character(a1$res3[[1]]$logLik[2:3]))),1))
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a1<-FigureTwo()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a1<-FigureTwo()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a1<-FigureTwo()
a2<-FigureThree()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a2<-FigureThree()
names(a2)
a2$res1
anova(a2$res1[[2]][[1]],a2$res1[[2]][[1]],test="F")
anova(a2$res1[[2]][[1]]@fit,a2$res1[[2]][[1]]@fit,test="F")
anova(a2$res1[[2]][[1]]@fit,a2$res1[[2]][[2]]@fit,test="F")
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a2<-FigureThree()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a2<-FigureThree()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a2<-FigureThree()
a1
a1$res1[[2]]
a1$res2[[2]]
a1$res3[[2]]
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
tmp<-FigureFour()
tmp<-FigureFour(addpdf=FALSE)
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
tmp<-FigureFour()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
tmp<-FigureFour()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
tmp<-FigureFour()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
tmp<-FigureFour()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
tmp<-FigureFour()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
tmp<-FigureFour()
  ## Bring in data#
    sp.list <- c("vain", "myda", "hubr")#
    sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
#
    dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
     dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
#
    # 1. LOGINCR#
    par(mfrow=c(2,3), bty="l")#
    dff$logincr <- log(dff$sizeNext-dff$size)#
    dff$logincr[!is.finite(dff$logincr)] <- NA#
    ylims1 <-c(-10,10)#
    ylims2 <-c(-10,10)#
    ylims3 <- c(-10,10)
   res3 <- growthModelComp(dataf=dff[dff$spcode==sp.list[3],],mainTitle=sp.names[3], makePlot=TRUE,respType="logincr", ylim=ylims3)
sum(!is.na(dff$size[dff$spcode==sp.list[3]] & !is.na(dff$incr[dff$spcode==sp.list[3]])))
  print(anova(res3[[2]][[1]]@fit,res3[[2]][[2]]@fit,res3[[2]][[3]]@fit,test="F"))
sum(!is.na(dff$size[dff$spcode==sp.list[3]] & !is.na(dff$logincr[dff$spcode==sp.list[3]])))
summary(res3[[2]][[3]]@fit)
summary(res3[[2]][[1]]@fit)
res3[[2]][[1]]
str(res3[[2]][[1]])
length(res3[[2]][[1]]@fit$residuals)
sum(!is.na(dff$size[dff$spcode==sp.list[3]] & !is.na(dff$logincr[dff$spcode==sp.list[3]])))
sum(!is.na(dff$size[dff$spcode==sp.list[3]] & !is.na(log(dff$sizeNext[dff$spcode==sp.list[3]]-dff$size))))
sum(!is.na(dff$size[dff$spcode==sp.list[3]] & !is.na(log(dff$sizeNext[dff$spcode==sp.list[3]]-dff$size[dff$spcode==sp.list[3]]))))
2736-2280
fit<-lm(dff$sizeNext[dff$spcode==sp.list[3]]~dff$size[dff$spcode==sp.list[3]])
summary(fit)
2642+92
tmp<-FigureFour()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
tmp<-FigureFour()
summary(tmp$res3[[2]][[3]]@fit)
sum(!is.na(dff$size[dff$spcode==sp.list[3]] & !is.na(log(dff$sizeNext[dff$spcode==sp.list[3]]-dff$size[dff$spcode==sp.list[3]]))))
sum(is.na(dff$size[dff$spcode==sp.list[3]] & is.na(log(dff$sizeNext[dff$spcode==sp.list[3]]-dff$size[dff$spcode==sp.list[3]]))))
sum(is.na(dff$size[dff$spcode==sp.list[3]] | is.na(log(dff$sizeNext[dff$spcode==sp.list[3]]-dff$size[dff$spcode==sp.list[3]]))))
sum(is.na(dff$size[dff$spcode==sp.list[3]]) | is.na(log(dff$sizeNext[dff$spcode==sp.list[3]]-dff$size[dff$spcode==sp.list[3]])))
fit<-lm(dff$sizeNext[dff$spcode==sp.list[3]]~dff$size[dff$spcode==sp.list[3]])
summary(fit)
fit<-lm(I(log(dff$sizeNext[dff$spcode==sp.list[3]]-dff$size[dff$spcode==sp.list[3]])~dff$size[dff$spcode==sp.list[3]])
)
x1<-log(dff$sizeNext[dff$spcode==sp.list[3]]-dff$size[dff$spcode==sp.list[3]])
x1[!is.finite(x1)] <- NA
fit<-lm(x1-dff$size[dff$spcode==sp.list[3]])~dff$size[dff$spcode==sp.list[3]])
fit<-lm(x1~dff$size[dff$spcode==sp.list[3]])
summary(fit)
  survModels <- FigureTwo()
     growModelsNoNeg <- FigureFour()
fit<-lm(x1~dff$size[dff$spcode==sp.list[3]])
sum(is.na(x1) | is.na(dff$size[dff$spcode==sp.list[3]]))
    sp.list <- c("vain", "myda", "hubr")#
    sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
#
    #get data#
    dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
    dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
    dff$incr <- dff$sizeNext - dff$size#
#
    survModels <- FigureTwo()#
    growModelsNeg <- FigureThree()#
    growModelsNoNeg <- FigureFour()#
    growModelsMech <- FigureFive()#
    #growModelsVaryInt <- FigureSix()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
growModelsMech <- FigureFive()
growModelsNeg$res1$growthObjects
growModelsNeg$res1$growthObjects[2]
growModelsNeg$res1a$growthObjects
growModelsNeg$res1a$growthObjects[2]
growModelsNeg$res1a$growthObjects[3]
growModelsMech$res1$growthObjects
survModels$res1$survObjects
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a1<-FigureSix()
a1<-Figure6()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a1<-Figure6(nBigMatrix=400)
Figure6
growModelsNoNeg
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a1<-getListVaryIntObjects(dff)
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a1<-getListVaryIntObjects(dff)
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a1<-getListVaryIntObjects(dff)
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a1<-getListVaryIntObjects(dff)
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a1<-getListVaryIntObjects(dff)
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a1<-getListVaryIntObjects(dff)
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a1<-getListVaryIntObjects(dff)
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a1<-getListVaryIntObjects(dff)
a1<-getListVaryIntObjects(dff)
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
a1<-getListVaryIntObjects(dff)
a1
getListVaryIntObjects
#
#
     sp.list <- c("vain", "myda", "hubr")#
     sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
#
     #get data#
     dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
     dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
     dff$incr <- dff$sizeNext - dff$size#
#
       #
     #survival models#
     survModels <- FigureTwo()#
     growModelsNeg <- FigureThree()#
     growModelsNoNeg <- FigureFour()#
     #growModelsVaryInterval <- FigureSix()#
#
     nsamp <- 10#
     target <- 25#
#
     sp.indc <- c(2,2,1)#
     #
     for(l in 1:2) { #
         if (l==1) integrateType <- "midpoint"#
         if (l==2) integrateType <- "cumul"#
    #
     #compare all mechanstic growth models#
         for (chsSp in 1:3){ #
  #
     #growth models#
             grList1 <- getListRegObjects(Obj=growModelsNeg[[chsSp]]$growthObjects[[sp.inc[chsSp]]],nsamp=nsamp) #corresponds to size+size2, lowest AIC#
             grList2 <- getListRegObjects(Obj=growModelsNeg[[3+chsSp]]$growthObjects[[sp.inc[chsSp]+1]],nsamp=nsamp)#corresponds to size+size2#
             grList3 <- getListRegObjects(Obj=growModelsNoNeg[[chsSp]]$growthObjects[[sp.inc[chsSp]+1]],nsamp=nsamp)#corresponds to size+size2#
             #grList4 <- getListTruncRegObjects(Obj=growModelsNoNeg[[3+chsSp]][[2]][[3]],nsamp=nsamp)#corresponds to size+size2#
             grList4 <- getListVaryIntObjects(dataf=dff[dff$spcode==sp.list[1],],nsamp=nsamp, expVars = c("size + size2"))#
             #
             for (svModel in 2:3) { #
         #
                #pick out the right survival#
                 res1 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList1,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)#
                 res2 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList2,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)#
                 res3 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList3,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)         #
                 res4 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList4,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)#
                 #
                 #
                 if (svModel==2) par(mfrow = c(2,2), bty = "l", pty = "s")#
                 ylims <- pmin(pmax(range(c(rbind(res1$LE,res2$LE,res3$LE,res4$LE))),1),1000)#
                 plot(res1$meshpoints, res1$LE[1, ], xlab = "Continuous (e.g. size) stage", ylab = "Life expectancy", type= "n",#
                      ylim = ylims)#
                 for (j in 1:nrow(res1$LE)) {#
                     points(res1$meshpoints,res1$LE[j, ],col=1, type = "l")#
                     points(res2$meshpoints,res2$LE[j, ],col=2, type = "l")#
                     points(res3$meshpoints,res3$LE[j, ],col=3, type = "l")#
                     points(res4$meshpoints,res4$LE[min(j,nrow(res4$LE)), ],col=4, type = "l")#
                 }#
                 if (svModel==2) {#
                     title(sp.names[chsSp])#
                     mtext("survival=size",side=3)#
                 }#
                 if (svModel==3) mtext("survival=size+size2",side=3)#
                 #
                 #
                 ylims <- pmin(pmax(range(c(rbind(res1$pTime,res2$pTime,res3$pTime,res4$pTime))),1),1000)#
                 plot(res1$meshpoints, res1$pTime[1, ], xlab = "Continuous (e.g. size) stage", ylab = "Passage time", type= "n",#
                      ylim = ylims)#
                 for (j in 1:nrow(res1$pTime)) {#
                     points(res1$meshpoints,res1$pTime[j, ],col=1, type = "l")#
                     points(res2$meshpoints,res2$pTime[j, ],col=2, type = "l")#
                     points(res3$meshpoints,res3$pTime[j, ],col=3, type = "l")#
                     points(res4$meshpoints,res4$pTime[min(j,nrow(res4$LE)), ],col=4, type = "l")#
                 }#
                 if (svModel==2) legend("topright",legend=c("SizeNext", "incr","logincr","truncincr"),lty=1,col=1:6, bty="n",cex=0.6)#
#
                 rc <- list(sizeNext=res1,incr=res2,logincr=res3,truncincr=res4)#
                 dump("rc",#
                      paste("/Users/cjessicametcalf/Documents/IPM/output/",sp.list[chsSp],".",#
                            integrateType,".",svModel,".Toutput.Q",sep=""))#
                 #
             }}#
     }
   nsamp <- 10#
     target <- 25#
#
     sp.inc <- c(2,2,1)#
     #
     for(l in 1:2) { #
         if (l==1) integrateType <- "midpoint"#
         if (l==2) integrateType <- "cumul"#
    #
     #compare all mechanstic growth models#
         for (chsSp in 1:3){ #
  #
     #growth models#
             grList1 <- getListRegObjects(Obj=growModelsNeg[[chsSp]]$growthObjects[[sp.inc[chsSp]]],nsamp=nsamp) #corresponds to size+size2, lowest AIC#
             grList2 <- getListRegObjects(Obj=growModelsNeg[[3+chsSp]]$growthObjects[[sp.inc[chsSp]+1]],nsamp=nsamp)#corresponds to size+size2#
             grList3 <- getListRegObjects(Obj=growModelsNoNeg[[chsSp]]$growthObjects[[sp.inc[chsSp]+1]],nsamp=nsamp)#corresponds to size+size2#
             #grList4 <- getListTruncRegObjects(Obj=growModelsNoNeg[[3+chsSp]][[2]][[3]],nsamp=nsamp)#corresponds to size+size2#
             grList4 <- getListVaryIntObjects(dataf=dff[dff$spcode==sp.list[1],],nsamp=nsamp, expVars = c("size + size2"))#
             #
             for (svModel in 2:3) { #
         #
                #pick out the right survival#
                 res1 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList1,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)#
                 res2 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList2,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)#
                 res3 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList3,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)         #
                 res4 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList4,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)#
                 #
                 #
                 if (svModel==2) par(mfrow = c(2,2), bty = "l", pty = "s")#
                 ylims <- pmin(pmax(range(c(rbind(res1$LE,res2$LE,res3$LE,res4$LE))),1),1000)#
                 plot(res1$meshpoints, res1$LE[1, ], xlab = "Continuous (e.g. size) stage", ylab = "Life expectancy", type= "n",#
                      ylim = ylims)#
                 for (j in 1:nrow(res1$LE)) {#
                     points(res1$meshpoints,res1$LE[j, ],col=1, type = "l")#
                     points(res2$meshpoints,res2$LE[j, ],col=2, type = "l")#
                     points(res3$meshpoints,res3$LE[j, ],col=3, type = "l")#
                     points(res4$meshpoints,res4$LE[min(j,nrow(res4$LE)), ],col=4, type = "l")#
                 }#
                 if (svModel==2) {#
                     title(sp.names[chsSp])#
                     mtext("survival=size",side=3)#
                 }#
                 if (svModel==3) mtext("survival=size+size2",side=3)#
                 #
                 #
                 ylims <- pmin(pmax(range(c(rbind(res1$pTime,res2$pTime,res3$pTime,res4$pTime))),1),1000)#
                 plot(res1$meshpoints, res1$pTime[1, ], xlab = "Continuous (e.g. size) stage", ylab = "Passage time", type= "n",#
                      ylim = ylims)#
                 for (j in 1:nrow(res1$pTime)) {#
                     points(res1$meshpoints,res1$pTime[j, ],col=1, type = "l")#
                     points(res2$meshpoints,res2$pTime[j, ],col=2, type = "l")#
                     points(res3$meshpoints,res3$pTime[j, ],col=3, type = "l")#
                     points(res4$meshpoints,res4$pTime[min(j,nrow(res4$LE)), ],col=4, type = "l")#
                 }#
                 if (svModel==2) legend("topright",legend=c("SizeNext", "incr","logincr","truncincr"),lty=1,col=1:6, bty="n",cex=0.6)#
#
                 rc <- list(sizeNext=res1,incr=res2,logincr=res3,truncincr=res4)#
                 dump("rc",#
                      paste("/Users/cjessicametcalf/Documents/IPM/output/",sp.list[chsSp],".",#
                            integrateType,".",svModel,".Toutput.Q",sep=""))#
                 #
             }}#
     }
chsSp
    grList4 <- getListVaryIntObjects(dataf=dff[dff$spcode==sp.list[1],],nsamp=nsamp, expVars = c("size + size2"))
grList4
     grList1 <- getListRegObjects(Obj=growModelsNeg[[chsSp]]$growthObjects[[sp.inc[chsSp]]],nsamp=nsamp) #corresponds to size+size2, lowest AIC#
             grList2 <- getListRegObjects(Obj=growModelsNeg[[3+chsSp]]$growthObjects[[sp.inc[chsSp]+1]],nsamp=nsamp)#corresponds to size+size2#
             grList3 <- getListRegObjects(Obj=growModelsNoNeg[[chsSp]]$growthObjects[[sp.inc[chsSp]+1]],nsamp=nsamp)#corresponds to size+size2#
             #grList4 <- getListTruncRegObjects(Obj=growModelsNoNeg[[3+chsSp]][[2]][[3]],nsamp=nsamp)#corresponds to size+size2#
             grList4 <- getListVaryIntObjects(dataf=dff[dff$spcode==sp.list[1],],nsamp=nsamp, expVars = c("size + size2"))
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
     grList1 <- getListRegObjects(Obj=growModelsNeg[[chsSp]]$growthObjects[[sp.inc[chsSp]]],nsamp=nsamp) #corresponds to size+size2, lowest AIC#
             grList2 <- getListRegObjects(Obj=growModelsNeg[[3+chsSp]]$growthObjects[[sp.inc[chsSp]+1]],nsamp=nsamp)#corresponds to size+size2#
             grList3 <- getListRegObjects(Obj=growModelsNoNeg[[chsSp]]$growthObjects[[sp.inc[chsSp]+1]],nsamp=nsamp)#corresponds to size+size2#
             #grList4 <- getListTruncRegObjects(Obj=growModelsNoNeg[[3+chsSp]][[2]][[3]],nsamp=nsamp)#corresponds to size+size2#
             grList4 <- getListVaryIntObjects(dataf=dff[dff$spcode==sp.list[1],],nsamp=nsamp, expVars = c("size + size2"))
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
     grList1 <- getListRegObjects(Obj=growModelsNeg[[chsSp]]$growthObjects[[sp.inc[chsSp]]],nsamp=nsamp) #corresponds to size+size2, lowest AIC#
             grList2 <- getListRegObjects(Obj=growModelsNeg[[3+chsSp]]$growthObjects[[sp.inc[chsSp]+1]],nsamp=nsamp)#corresponds to size+size2#
             grList3 <- getListRegObjects(Obj=growModelsNoNeg[[chsSp]]$growthObjects[[sp.inc[chsSp]+1]],nsamp=nsamp)#corresponds to size+size2#
             #grList4 <- getListTruncRegObjects(Obj=growModelsNoNeg[[3+chsSp]][[2]][[3]],nsamp=nsamp)#corresponds to size+size2#
             grList4 <- getListVaryIntObjects(dataf=dff[dff$spcode==sp.list[1],],nsamp=nsamp, expVars = c("size + size2"))
   sp.inc <- c(2,2,1)#
     #
     for(l in 1:2) { #
         if (l==1) integrateType <- "midpoint"#
         if (l==2) integrateType <- "cumul"#
    #
     #compare all mechanstic growth models#
         for (chsSp in 1:3){ #
  #
     #growth models#
             grList1 <- getListRegObjects(Obj=growModelsNeg[[chsSp]]$growthObjects[[sp.inc[chsSp]]],nsamp=nsamp) #corresponds to size+size2, lowest AIC#
             grList2 <- getListRegObjects(Obj=growModelsNeg[[3+chsSp]]$growthObjects[[sp.inc[chsSp]+1]],nsamp=nsamp)#corresponds to size+size2#
             grList3 <- getListRegObjects(Obj=growModelsNoNeg[[chsSp]]$growthObjects[[sp.inc[chsSp]+1]],nsamp=nsamp)#corresponds to size+size2#
             #grList4 <- getListTruncRegObjects(Obj=growModelsNoNeg[[3+chsSp]][[2]][[3]],nsamp=nsamp)#corresponds to size+size2#
             grList4 <- getListVaryIntObjects(dataf=dff[dff$spcode==sp.list[1],],nsamp=nsamp, expVars = c("size + size2"))#
             #
             for (svModel in 2:3) { #
         #
                #pick out the right survival#
                 res1 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList1,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)#
                 res2 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList2,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)#
                 res3 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList3,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)         #
                 res4 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList4,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)#
                 #
                 #
                 if (svModel==2) par(mfrow = c(2,2), bty = "l", pty = "s")#
                 ylims <- pmin(pmax(range(c(rbind(res1$LE,res2$LE,res3$LE,res4$LE))),1),1000)#
                 plot(res1$meshpoints, res1$LE[1, ], xlab = "Continuous (e.g. size) stage", ylab = "Life expectancy", type= "n",#
                      ylim = ylims)#
                 for (j in 1:nrow(res1$LE)) {#
                     points(res1$meshpoints,res1$LE[j, ],col=1, type = "l")#
                     points(res2$meshpoints,res2$LE[j, ],col=2, type = "l")#
                     points(res3$meshpoints,res3$LE[j, ],col=3, type = "l")#
                     points(res4$meshpoints,res4$LE[min(j,nrow(res4$LE)), ],col=4, type = "l")#
                 }#
                 if (svModel==2) {#
                     title(sp.names[chsSp])#
                     mtext("survival=size",side=3)#
                 }#
                 if (svModel==3) mtext("survival=size+size2",side=3)#
                 #
                 #
                 ylims <- pmin(pmax(range(c(rbind(res1$pTime,res2$pTime,res3$pTime,res4$pTime))),1),1000)#
                 plot(res1$meshpoints, res1$pTime[1, ], xlab = "Continuous (e.g. size) stage", ylab = "Passage time", type= "n",#
                      ylim = ylims)#
                 for (j in 1:nrow(res1$pTime)) {#
                     points(res1$meshpoints,res1$pTime[j, ],col=1, type = "l")#
                     points(res2$meshpoints,res2$pTime[j, ],col=2, type = "l")#
                     points(res3$meshpoints,res3$pTime[j, ],col=3, type = "l")#
                     points(res4$meshpoints,res4$pTime[min(j,nrow(res4$LE)), ],col=4, type = "l")#
                 }#
                 if (svModel==2) legend("topright",legend=c("SizeNext", "incr","logincr","truncincr"),lty=1,col=1:6, bty="n",cex=0.6)#
#
                 rc <- list(sizeNext=res1,incr=res2,logincr=res3,truncincr=res4)#
                 dump("rc",#
                      paste("/Users/cjessicametcalf/Documents/IPM/output/",sp.list[chsSp],".",#
                            integrateType,".",svModel,".Toutput.Q",sep=""))#
                 #
             }}#
     }
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")#
source("/Users/cjessicametcalf/Documents/IPM/source/BeastiaryGrowthFunctions.R")
#
     sp.list <- c("vain", "myda", "hubr")#
     sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
#
     #get data#
     dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
     dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
     dff$incr <- dff$sizeNext - dff$size#
#
       #
     #survival models#
     survModels <- FigureTwo()#
     growModelsNeg <- FigureThree()#
     growModelsNoNeg <- FigureFour()#
     #growModelsVaryInterval <- FigureSix()#
#
     nsamp <- 100#
     target <- 25#
#
     sp.inc <- c(2,2,1) #indicator for what model you want, i.e., size2 for first two and size for last#
     #
     for(l in 1:2) { #
         if (l==1) integrateType <- "midpoint"#
         if (l==2) integrateType <- "cumul"#
    #
     #compare all mechanstic growth models#
         for (chsSp in 1:3){ #
  #
     #growth models#
             grList1 <- getListRegObjects(Obj=growModelsNeg[[chsSp]]$growthObjects[[sp.inc[chsSp]]],nsamp=nsamp) #corresponds to size+size2, lowest AIC#
             grList2 <- getListRegObjects(Obj=growModelsNeg[[3+chsSp]]$growthObjects[[sp.inc[chsSp]+1]],nsamp=nsamp)#corresponds to size+size2#
             grList3 <- getListRegObjects(Obj=growModelsNoNeg[[chsSp]]$growthObjects[[sp.inc[chsSp]+1]],nsamp=nsamp)#corresponds to size+size2#
             #grList4 <- getListTruncRegObjects(Obj=growModelsNoNeg[[3+chsSp]][[2]][[3]],nsamp=nsamp)#corresponds to size+size2#
             grList4 <- getListVaryIntObjects(dataf=dff[dff$spcode==sp.list[1],],nsamp=nsamp, expVars = c("size + size2"))#
             #
             for (svModel in 2:3) { #
         #
                #pick out the right survival#
                 res1 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList1,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)#
                 res2 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList2,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)#
                 res3 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList3,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)         #
                 res4 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList4,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)#
                 #
                 #
                 if (svModel==2) par(mfrow = c(2,2), bty = "l", pty = "s")#
                 ylims <- pmin(pmax(range(c(rbind(res1$LE,res2$LE,res3$LE,res4$LE))),1),1000)#
                 plot(res1$meshpoints, res1$LE[1, ], xlab = "Continuous (e.g. size) stage", ylab = "Life expectancy", type= "n",#
                      ylim = ylims)#
                 for (j in 1:nrow(res1$LE)) {#
                     points(res1$meshpoints,res1$LE[j, ],col=1, type = "l")#
                     points(res2$meshpoints,res2$LE[j, ],col=2, type = "l")#
                     points(res3$meshpoints,res3$LE[j, ],col=3, type = "l")#
                     points(res4$meshpoints,res4$LE[min(j,nrow(res4$LE)), ],col=4, type = "l")#
                 }#
                 if (svModel==2) {#
                     title(sp.names[chsSp])#
                     mtext("survival=size",side=3)#
                 }#
                 if (svModel==3) mtext("survival=size+size2",side=3)#
                 #
                 #
                 ylims <- pmin(pmax(range(c(rbind(res1$pTime,res2$pTime,res3$pTime,res4$pTime))),1),1000)#
                 plot(res1$meshpoints, res1$pTime[1, ], xlab = "Continuous (e.g. size) stage", ylab = "Passage time", type= "n",#
                      ylim = ylims)#
                 for (j in 1:nrow(res1$pTime)) {#
                     points(res1$meshpoints,res1$pTime[j, ],col=1, type = "l")#
                     points(res2$meshpoints,res2$pTime[j, ],col=2, type = "l")#
                     points(res3$meshpoints,res3$pTime[j, ],col=3, type = "l")#
                     points(res4$meshpoints,res4$pTime[min(j,nrow(res4$LE)), ],col=4, type = "l")#
                 }#
                 if (svModel==2) legend("topright",legend=c("SizeNext", "incr","logincr","logincr delt"),lty=1,col=1:6, bty="n",cex=0.6)#
#
                 rc <- list(sizeNext=res1,incr=res2,logincr=res3,truncincr=res4)#
                 dump("rc",#
                      paste("/Users/cjessicametcalf/Documents/IPM/output/",sp.list[chsSp],".",#
                            integrateType,".",svModel,".Toutput.Q",sep=""))#
                 #
             }}#
     }
#
     sp.list <- c("vain", "myda", "hubr")#
     sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
#
     #get data#
     dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
     dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
     dff$incr <- dff$sizeNext - dff$size#
#
       #
     #survival models#
     survModels <- FigureTwo()#
     growModelsNeg <- FigureThree()#
     growModelsNoNeg <- FigureFour()#
     #growModelsVaryInterval <- FigureSix()#
#
     nsamp <- 100#
     target <- 25#
#
     sp.inc <- c(2,2,1) #indicator for what model you want, i.e., size2 for first two and size for last#
     #
     for(l in 1:2) { #
         if (l==1) integrateType <- "midpoint"#
         if (l==2) integrateType <- "cumul"#
    #
     #compare all mechanstic growth models#
         for (chsSp in 1:3){ #
  #
     #growth models#
             grList1 <- getListRegObjects(Obj=growModelsNeg[[chsSp]]$growthObjects[[sp.inc[chsSp]]],nsamp=nsamp) #corresponds to size+size2, lowest AIC#
             grList2 <- getListRegObjects(Obj=growModelsNeg[[3+chsSp]]$growthObjects[[sp.inc[chsSp]+1]],nsamp=nsamp)#corresponds to size+size2#
             grList3 <- getListRegObjects(Obj=growModelsNoNeg[[chsSp]]$growthObjects[[sp.inc[chsSp]+1]],nsamp=nsamp)#corresponds to size+size2#
             #grList4 <- getListTruncRegObjects(Obj=growModelsNoNeg[[3+chsSp]][[2]][[3]],nsamp=nsamp)#corresponds to size+size2#
             grList4 <- getListVaryIntObjects(dataf=dff[dff$spcode==sp.list[1],],nsamp=nsamp, expVars = c("size + size2"))#
             #
             for (svModel in 2:3) { #
         #
                #pick out the right survival#
                 res1 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList1,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)#
                 res2 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList2,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)#
                 res3 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList3,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)         #
                 res4 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList4,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)#
                 #
                 #
                 if (svModel==2) par(mfrow = c(2,2), bty = "l", pty = "s")#
                 ylims <- pmin(pmax(range(c(rbind(res1$LE,res2$LE,res3$LE,res4$LE))),1),1000)#
                 plot(res1$meshpoints, res1$LE[1, ], xlab = "Continuous (e.g. size) stage", ylab = "Life expectancy", type= "n",#
                      ylim = ylims)#
                 for (j in 1:nrow(res1$LE)) {#
                     points(res1$meshpoints,res1$LE[j, ],col=1, type = "l")#
                     points(res2$meshpoints,res2$LE[j, ],col=2, type = "l")#
                     points(res3$meshpoints,res3$LE[j, ],col=3, type = "l")#
                     points(res4$meshpoints,res4$LE[min(j,nrow(res4$LE)), ],col=4, type = "l")#
                 }#
                 if (svModel==2) {#
                     title(sp.names[chsSp])#
                     mtext("survival=size",side=3)#
                 }#
                 if (svModel==3) mtext("survival=size+size2",side=3)#
                 #
                 #
                 ylims <- pmin(pmax(range(c(rbind(res1$pTime,res2$pTime,res3$pTime,res4$pTime))),1),1000)#
                 plot(res1$meshpoints, res1$pTime[1, ], xlab = "Continuous (e.g. size) stage", ylab = "Passage time", type= "n",#
                      ylim = ylims)#
                 for (j in 1:nrow(res1$pTime)) {#
                     points(res1$meshpoints,res1$pTime[j, ],col=1, type = "l")#
                     points(res2$meshpoints,res2$pTime[j, ],col=2, type = "l")#
                     points(res3$meshpoints,res3$pTime[j, ],col=3, type = "l")#
                     points(res4$meshpoints,res4$pTime[min(j,nrow(res4$LE)), ],col=4, type = "l")#
                 }#
                 if (svModel==2) legend("topright",legend=c("SizeNext", "incr","logincr","logincr delt"),lty=1,col=1:6, bty="n",cex=0.6)#
#
                 rc <- list(sizeNext=res1,incr=res2,logincr=res3,truncincr=res4)#
                 dump("rc",#
                      paste("/Users/cjessicametcalf/Documents/IPM/output/",sp.list[chsSp],".",#
                            integrateType,".",svModel,".Toutput.Q",sep=""))#
                 #
             }}#
     }
 grList4 <- getListVaryIntObjects(dataf=dff[dff$spcode==sp.list[1],],nsamp=nsamp, expVars = c("size + size2"))
 grList4 <- getListVaryIntObjects(dataf=dff[dff$spcode==sp.list[1],],nsamp=nsamp, expVars = c("size + size2"))
 grList4 <- getListVaryIntObjects(dataf=dff[dff$spcode==sp.list[1],],nsamp=nsamp, expVars = c("size + size2"))
       #pick out the right survival#
                 res1 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList1,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)#
                 res2 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList2,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)#
                 res3 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList3,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)         #
                 res4 <- getIPMoutputDirect(survObjList = list(survModels[[chsSp]][[2]][[svModel]]),#
                                            growObjList = grList4,targetSize = target,nBigMatrix = 300,#
                                            minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                            integrateType=integrateType, correction="constant",storePar=FALSE)#
                 #
                 #
                 if (svModel==2) par(mfrow = c(2,2), bty = "l", pty = "s")#
                 ylims <- pmin(pmax(range(c(rbind(res1$LE,res2$LE,res3$LE,res4$LE))),1),1000)#
                 plot(res1$meshpoints, res1$LE[1, ], xlab = "Continuous (e.g. size) stage", ylab = "Life expectancy", type= "n",#
                      ylim = ylims)#
                 for (j in 1:nrow(res1$LE)) {#
                     points(res1$meshpoints,res1$LE[j, ],col=1, type = "l")#
                     points(res2$meshpoints,res2$LE[j, ],col=2, type = "l")#
                     points(res3$meshpoints,res3$LE[j, ],col=3, type = "l")#
                     points(res4$meshpoints,res4$LE[min(j,nrow(res4$LE)), ],col=4, type = "l")#
                 }#
                 if (svModel==2) {#
                     title(sp.names[chsSp])#
                     mtext("survival=size",side=3)#
                 }#
                 if (svModel==3) mtext("survival=size+size2",side=3)#
                 #
                 #
                 ylims <- pmin(pmax(range(c(rbind(res1$pTime,res2$pTime,res3$pTime,res4$pTime))),1),1000)#
                 plot(res1$meshpoints, res1$pTime[1, ], xlab = "Continuous (e.g. size) stage", ylab = "Passage time", type= "n",#
                      ylim = ylims)#
                 for (j in 1:nrow(res1$pTime)) {#
                     points(res1$meshpoints,res1$pTime[j, ],col=1, type = "l")#
                     points(res2$meshpoints,res2$pTime[j, ],col=2, type = "l")#
                     points(res3$meshpoints,res3$pTime[j, ],col=3, type = "l")#
                     points(res4$meshpoints,res4$pTime[min(j,nrow(res4$LE)), ],col=4, type = "l")#
                 }#
                 if (svModel==2) legend("topright",legend=c("SizeNext", "incr","logincr","logincr delt"),lty=1,col=1:6, bty="n",cex=0.6)
svModel
            #BUILD Tmatrix#
                Tmatrix <- create.IPM.Tmatrix(nBigMatrix = 300,#
                                              minSize = 0.9*min(dataf$size[dff$spcode==sp.list[chsSp]],,na.rm=TRUE),#
                                              maxSize = 1.1*max(dataf$size[dff$spcode==sp.list[chsSp]],,na.rm=TRUE),#
                                              growObj = grList4[[1]], survObj = survModels[[chsSp]][[2]][[svModel]], correction="constant",integrateType="midpoint")#
                Tmatrix1 <- create.IPM.Tmatrix(nBigMatrix =300,#
                                               minSize = 0.9*min(dataf$size[dff$spcode==sp.list[chsSp]],,na.rm=TRUE),#
                                               maxSize = 1.1*max(dataf$size[dff$spcode==sp.list[chsSp]],,na.rm=TRUE),#
                                               growObj = grList4[[1]], survObj = survModels[[chsSp]][[2]][[svModel]],integrateType="cumul",#
                                               correction="constant")
            #BUILD Tmatrix#
                Tmatrix <- create.IPM.Tmatrix(nBigMatrix = 300,#
                                              minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                              maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                              growObj = grList4[[1]], survObj = survModels[[chsSp]][[2]][[svModel]], correction="constant",integrateType="midpoint")#
                Tmatrix1 <- create.IPM.Tmatrix(nBigMatrix =300,#
                                               minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                               maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                               growObj = grList4[[1]], survObj = survModels[[chsSp]][[2]][[svModel]],integrateType="cumul",#
                                               correction="constant")
imaget(Tmatrix@meshpoints,Tmatrix@meshpoints,log(Tmatrix))
image(Tmatrix@meshpoints,Tmatrix@meshpoints,log(t(Tmatrix)))
grList4[[1]]
    grlist <- c(growModelsNeg$res3$growthObjects[1],growModelsNeg$res3a$growthObjects[2],#
                growModelsNoNeg$res3$growthObjects[2],growModelsNoNeg$res3a$growthObjects[2],#
                growModelsMech$res3$growthObjects[1:6])
            #BUILD Tmatrix#
                Tmatrix <- create.IPM.Tmatrix(nBigMatrix = 300,#
                                              minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                              maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                              growObj = grList[4][[1]], survObj = survModels[[chsSp]][[2]][[svModel]], correction="constant",integrateType="midpoint")#
                Tmatrix1 <- create.IPM.Tmatrix(nBigMatrix =300,#
                                               minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                               maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                               growObj = grList[4][[1]], survObj = survModels[[chsSp]][[2]][[svModel]],integrateType="cumul",#
                                               correction="constant")
    grlist <- c(growModelsNeg$res1$growthObjects[2],growModelsNeg$res1a$growthObjects[3],#
                growModelsNoNeg$res1$growthObjects[3],growModelsNoNeg$res1a$growthObjects[3],#
                growModelsMech$res1$growthObjects[1:6])#,growModelsVaryInt$res1$growthObjects)
            #BUILD Tmatrix#
                Tmatrix <- create.IPM.Tmatrix(nBigMatrix = 300,#
                                              minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                              maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                              growObj = grList[4][[1]], survObj = survModels[[chsSp]][[2]][[svModel]], correction="constant",integrateType="midpoint")#
                Tmatrix1 <- create.IPM.Tmatrix(nBigMatrix =300,#
                                               minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                               maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                               growObj = grList[4][[1]], survObj = survModels[[chsSp]][[2]][[svModel]],integrateType="cumul",#
                                               correction="constant")
            #BUILD Tmatrix#
                Tmatrix <- create.IPM.Tmatrix(nBigMatrix = 300,#
                                              minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                              maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                              growObj = grlist[4][[1]], survObj = survModels[[chsSp]][[2]][[svModel]], correction="constant",integrateType="midpoint")#
                Tmatrix1 <- create.IPM.Tmatrix(nBigMatrix =300,#
                                               minSize = 0.9*min(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                               maxSize = 1.1*max(dff$size[dff$spcode==sp.list[chsSp]],na.rm=TRUE),#
                                               growObj = grlist[4][[1]], survObj = survModels[[chsSp]][[2]][[svModel]],integrateType="cumul",#
                                               correction="constant")
image(Tmatrix@meshpoints,Tmatrix@meshpoints,log(t(Tmatrix)))
image(Tmatrix@meshpoints,Tmatrix@meshpoints,log(t(Tmatrix)))
image(Tmatrix@meshpoints,Tmatrix@meshpoints,log(t(Tmatrix1)))
image(Tmatrix@meshpoints,Tmatrix@meshpoints,log(t(Tmatrix)))
contour(Tmatrix@meshpoints,Tmatrix@meshpoints,log(t(Tmatrix1)))
image(Tmatrix@meshpoints,Tmatrix@meshpoints,log(t(Tmatrix)))
contour(Tmatrix@meshpoints,Tmatrix@meshpoints,log(t(Tmatrix1)),add=T)
image(Tmatrix@meshpoints,Tmatrix@meshpoints,log(t(Tmatrix)))
contour(Tmatrix@meshpoints,Tmatrix@meshpoints,log(t(Tmatrix1)),add=T)
image(Tmatrix@meshpoints,Tmatrix@meshpoints,log(t(Tmatrix1)))
contour(Tmatrix@meshpoints,Tmatrix@meshpoints,log(t(Tmatrix1)),add=T)
image(Tmatrix@meshpoints,Tmatrix@meshpoints,log(t(Tmatrix)))
contour(Tmatrix@meshpoints,Tmatrix@meshpoints,log(t(Tmatrix)),add=T)
LE <- MeanLifeExpect(Tmatrix)
LE1 <- MeanLifeExpect(Tmatrix1)
plot(Tmatrix@meshpoints,LE)
plot(Tmatrix@meshpoints,LE, type="l")
points(Tmatrix@meshpoints,LE1, type="l",col=2)
contour(Tmatrix@meshpoints,Tmatrix@meshpoints,(t(Tmatrix-Tmatrix1)),add=T)
image(Tmatrix@meshpoints,Tmatrix@meshpoints,log(t(Tmatrix)))
contour(Tmatrix@meshpoints,Tmatrix@meshpoints,(t(Tmatrix-Tmatrix1)),add=T)
image(Tmatrix@meshpoints,Tmatrix@meshpoints,(t(Tmatrix-Tmatrix1)))
image(Tmatrix@meshpoints,Tmatrix@meshpoints,exp(t(Tmatrix-Tmatrix1)))
range(c(Tmatrix-Tmatrix1))
image(Tmatrix@meshpoints,Tmatrix@meshpoints,exp(t(Tmatrix[]-Tmatrix1[])))
image(Tmatrix@meshpoints,Tmatrix@meshpoints,(t(Tmatrix[]-Tmatrix1[])))
(Tmatrix-Tmatrix1)
contour(Tmatrix@meshpoints,Tmatrix@meshpoints,(t(Tmatrix-Tmatrix1)),add=T)
plot(Tmatrix[300,])
plot(Tmatrix[300,], type="l")
points(Tmatrix1[300,], type="l",col=2)
plot(Tmatrix[150,], type="l")
points(Tmatrix1[150,], type="l",col=2)
plot(Tmatrix[1,], type="l")
points(Tmatrix1[1,], type="l",col=2)
plot(Tmatrix[1,], type="l")
points(Tmatrix1[,1], type="l",col=2)
points(Tmatrix[,1], type="l",col=1)
plot(Tmatrix[300,], type="l")
points(Tmatrix1[300,], type="l",col=2)
plot(Tmatrix[,300], type="l")
points(Tmatrix1[,300], type="l",col=2)
plot(Tmatrix[,300], type="l")
create.IPM.Tmatrix
