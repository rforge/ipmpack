plot(a1[[1]][a1[[3]],3000],, type="l")
points(a1[[1]][a1[[4]],3000], type="l",col=2)
#
	##compare across a range of periodicities three different wanings#
	wanes <- seq(1e-9,1,length=50)#
	pd <- c(2,10,100,200)#
	st <- matrix(NA,length(wanes),length(pd))#
	Tmax <- 5000#
	for (j in 1:length(wanes)) { #
		for (k in 1:length(pd)) { #
		a1<-TrackPopStruct(fert=0.01*dnorm(1:50,25,5)/max(dnorm(1:50,25,5)),waning.maternal.par=wanes[j],period=pd[k],Tmax=Tmax)#
		st[j,k] <- mean(diff(colSums(a1[[1]][,(Tmax-500):Tmax])))#
#
		}}#
	image(wanes,pd,(st),xlab="waning rate", ylab="periodicity of outbreaks")
#
#
#run this#
a1<-SimTsir()#
plot(bws,bw.ev71[,3]/ur,type="b",col=1,xlab="Year",ylab="Cases (raw data)",xaxt="n", bty="n")#
lines(a1$Ival,type="l",lwd=1.2,col="blue")#
#axis(1,at=seq(13,312,by=26),labels=c("2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011"))#
#
#check susce#
plot(bws,St, xlab="year", ylab="inferred susc")#
lines(a1$Sval,type="l",lwd=1.2,col="blue")
	which(st==apply(st,2,max))
	which(st==apply(st,1,max))
	which(st==apply(st,1,max),arr.ind=T)
plot(st[1,])
plot(st[1,], type="l")
plot(st[2,], type="l")
	plot(st[,1],type="l")
	plot(st[,2],type="l")
	which(st==apply(st,2,max),arr.ind=T)
	which(t(st)==apply(st,1,max),arr.ind=T)
	which(t(st)==apply(st,2,max),arr.ind=T)
matplot(t(st))
matplot(t(st), type="l")
matplot((st), type="l")
wanes[1]
wanes[2]
matplot((st), type="b")
matplot((st), type="b",pch=19)
wanes[1:5]
plot(1:50,exp(-wanes[1]*(1:50)), type="l")
points(1:50,exp(-wanes[2]*(1:50)), type="l",col=2)
points(1:50,exp(-wanes[3]*(1:50)), type="l",col=3)
plot(1:50,exp(-wanes[1]*(1:50)), type="l", ylim=c(0,1))
points(1:50,exp(-wanes[2]*(1:50)), type="l",col=2)
points(1:50,exp(-wanes[3]*(1:50)), type="l",col=3)
#
##
TrackPopStruct <- function(age.classes=1:50,#
			mort=c(0.18950, 0.04376, 0.02816, 0.01862, 0.01212, 0.00940, 0.00789, #
0.00682, 0.00589, 0.00568, 0.00601, 0.00574, 0.00546,0.00516, 0.00445, 0.00437, 0.00479, 0.00531, #
0.00556, 0.00554, 0.00584, 0.00675, 0.00759, 0.00702, 0.00653, 0.00650, 0.00652, 0.00685, 0.00858, #
0.00888, 0.00782, 0.00756, 0.00784, 0.00808, 0.00809, 0.00888, 0.00994, 0.00983, 0.00967, 0.00972,#
0.00994, 0.00948, 0.00948, 0.00953, 0.01012, 0.01049, 0.01065, 0.01109, 0.01130, 0.01152),   #one for every age class (danish 1835 cohort here)#
			mu.sick=1.1,	#1.01 how much more likely sick are to die#
			beta=c(0.1), #
			waning.maternal.par=1,#
			waning.immunity=0,#
			fert=0.1*dnorm(1:50,25,5)/max(dnorm(1:50,25,5)),#
			period=100,alpha=0.6,mag=0.8,Tmax=5000, n.runin=1000){#
			require(MASS)#
			#
			#get Fmatrix (won't change)#
			Fmat <- buildFMatrix(age.classes=age.classes,fert=fert)#
			#
			#get seasonal trans#
			seasTrans <- pmax(pmin(periodTrans(period=period,alpha=alpha,mag=mag,Tmax=Tmax),1),0)		#
#
			nt<-rep(0,length(age.classes)*4)#
			nt[1+seq(1,length(age.classes)*4,by=4)] <- 1#
			nt[2+seq(1,5*4,by=4)] <- 1#
			nt.store<-matrix(NA,length(age.classes)*4,Tmax)#
			#
			for (t in 1:Tmax) {#
				#build Tmat	#
				Tmat <- buildTMatrix(age.classes=age.classes,#
				mort=mort,   #one for every age class (danish 1835 cohort here)#
				mu.sick=mu.sick,	#how much more likely sick are to die#
				beta=seasTrans[t], #
				waning.maternal.par=waning.maternal.par,#
				waning.immunity=waning.immunity)#
#
				nt1<-(Tmat+Fmat) %*% nt	#
				nt.store[,t]<-nt1#
				nt<-nt1#
				#
			}#
			#
			m.inds <- seq(1,length(age.classes)*4,by=4)#
			s.inds <- m.inds+1			#
			i.inds <- m.inds+2			#
			r.inds <- m.inds+3			#
#
			return(list(nt.store=nt.store,m.inds=m.inds,s.inds=s.inds,i.inds=i.inds,r.inds=r.inds,seasTrans=seasTrans))#
		}
#
	##compare across a range of periodicities three different wanings#
	wanes <- seq(1e-9,1,length=50)#
	pd <- c(2,10,50,100)#
	st <- matrix(NA,length(wanes),length(pd))#
	Tmax <- 5000#
	for (j in 1:length(wanes)) { #
		for (k in 1:length(pd)) { #
		a1<-TrackPopStruct(fert=0.01*dnorm(1:50,25,5)/max(dnorm(1:50,25,5)),waning.maternal.par=wanes[j],period=pd[k],Tmax=Tmax)#
		st[j,k] <- mean(diff(colSums(a1[[1]][,(Tmax-500):Tmax])))#
#
		}}#
	image(wanes,pd,(st),xlab="waning rate", ylab="periodicity of outbreaks")#
#
	matplot((st), type="b",pch=19)#
#
	plot(1:50,exp(-wanes[1]*(1:50)), type="l", ylim=c(0,1))#
	points(1:50,exp(-wanes[2]*(1:50)), type="l",col=2)#
	points(1:50,exp(-wanes[3]*(1:50)), type="l",col=1)
waneds[2]
wanes[2]
	##compare across a range of periodicities three different wanings#
	wanes <- seq(1e-9,0.04,length=5)#
	pd <- c(2,10,50,100)#
	st <- matrix(NA,length(wanes),length(pd))#
	Tmax <- 5000#
	for (j in 1:length(wanes)) { #
		for (k in 1:length(pd)) { #
		a1<-TrackPopStruct(fert=0.01*dnorm(1:50,25,5)/max(dnorm(1:50,25,5)),waning.maternal.par=wanes[j],period=pd[k],Tmax=Tmax)#
		st[j,k] <- mean(diff(colSums(a1[[1]][,(Tmax-500):Tmax])))#
#
		}}#
	image(wanes,pd,(st),xlab="waning rate", ylab="periodicity of outbreaks")#
#
	matplot((st), type="b",pch=19)#
#
	plot(1:50,exp(-wanes[1]*(1:50)), type="l", ylim=c(0,1))#
	points(1:50,exp(-wanes[2]*(1:50)), type="l",col=2)#
	points(1:50,exp(-wanes[3]*(1:50)), type="l",col=1)
#
	##compare across a range of periodicities three different wanings#
	wanes <- seq(1e-9,0.04,length=5)#
	pd <- c(2,10,50,100)#
	st <- matrix(NA,length(wanes),length(pd))#
	Tmax <- 5000#
	for (j in 1:length(wanes)) { #
		for (k in 1:length(pd)) { #
		a1<-TrackPopStruct(fert=0.01*dnorm(1:50,25,5)/max(dnorm(1:50,25,5)),waning.maternal.par=wanes[j],period=pd[k],Tmax=Tmax,mu.sick=1.5)#
		st[j,k] <- mean(diff(colSums(a1[[1]][,(Tmax-500):Tmax])))#
#
		}}#
	image(wanes,pd,(st),xlab="waning rate", ylab="periodicity of outbreaks")#
#
	matplot((st), type="b",pch=19)#
#
	plot(1:50,exp(-wanes[1]*(1:50)), type="l", ylim=c(0,1))#
	points(1:50,exp(-wanes[2]*(1:50)), type="l",col=2)#
	points(1:50,exp(-wanes[3]*(1:50)), type="l",col=1)
#
	##compare across a range of periodicities three different wanings#
	wanes <- seq(1e-9,0.02,length=5)#
	pd <- c(2,10,50,100)#
	st <- matrix(NA,length(wanes),length(pd))#
	Tmax <- 5000#
	for (j in 1:length(wanes)) { #
		for (k in 1:length(pd)) { #
		a1<-TrackPopStruct(fert=0.01*dnorm(1:50,25,5)/max(dnorm(1:50,25,5)),#
				waning.maternal.par=wanes[j],period=pd[k],Tmax=Tmax,#
				mu.sick=1.5)#
		st[j,k] <- mean(diff(colSums(a1[[1]][,(Tmax-500):Tmax])))#
#
		}}#
	image(wanes,pd,(st),xlab="waning rate", ylab="periodicity of outbreaks")#
#
	matplot(wanes,(st), type="b",pch=19)#
#
	plot(1:50,exp(-wanes[1]*(1:50)), type="l", ylim=c(0,1))#
	points(1:50,exp(-wanes[2]*(1:50)), type="l",col=2)#
	points(1:50,exp(-wanes[3]*(1:50)), type="l",col=1)
#
	##compare across a range of periodicities three different wanings#
	wanes <- seq(1e-9,0.02,length=5)#
	pd <- c(2,10)#,50,100)#
	st <- matrix(NA,length(wanes),length(pd))#
	Tmax <- 5000#
	for (j in 1:length(wanes)) { #
		for (k in 1:length(pd)) { #
		a1<-TrackPopStruct(fert=0.1*dnorm(1:50,25,5)/max(dnorm(1:50,25,5)),#
				waning.maternal.par=wanes[j],period=pd[k],Tmax=Tmax,#
				mu.sick=1.5)#
		st[j,k] <- mean(diff(colSums(a1[[1]][,(Tmax-500):Tmax])))#
		}#
	print(wanes[j])#
	}#
	image(wanes,pd,(st),xlab="waning rate", ylab="periodicity of outbreaks")#
#
	matplot(wanes,(st), type="b",pch=19)#
#
	plot(1:50,exp(-wanes[1]*(1:50)), type="l", ylim=c(0,1))#
	points(1:50,exp(-wanes[2]*(1:50)), type="l",col=2)#
	points(1:50,exp(-wanes[3]*(1:50)), type="l",col=1)
points(1:50,exp(-wanes[5]*(1:50)), type="l",col=1)
#
	##compare across a range of periodicities three different wanings#
	wanes <- seq(1e-9,1,length=5)#
	pd <- c(2,10)#,50,100)#
	st <- matrix(NA,length(wanes),length(pd))#
	Tmax <- 5000#
	for (j in 1:length(wanes)) { #
		for (k in 1:length(pd)) { #
		a1<-TrackPopStruct(fert=0.1*dnorm(1:50,25,5)/max(dnorm(1:50,25,5)),#
				waning.maternal.par=wanes[j],period=pd[k],Tmax=Tmax,#
				mu.sick=1.5)#
		st[j,k] <- mean(diff(colSums(a1[[1]][,(Tmax-500):Tmax])))#
		}#
	print(j)#
	}#
	image(wanes,pd,(st),xlab="waning rate", ylab="periodicity of outbreaks")#
#
	matplot(wanes,(st), type="b",pch=19)#
#
	plot(1:50,exp(-wanes[1]*(1:50)), type="l", ylim=c(0,1))#
	points(1:50,exp(-wanes[2]*(1:50)), type="l",col=2)#
	points(1:50,exp(-wanes[3]*(1:50)), type="l",col=1)
#
	##compare across a range of periodicities three different wanings#
	wanes <- seq(1e-9,0.6,length=5)#
	pd <- c(2,10)#,50,100)#
	st <- matrix(NA,length(wanes),length(pd))#
	Tmax <- 5000#
	for (j in 1:length(wanes)) { #
		for (k in 1:length(pd)) { #
		a1<-TrackPopStruct(fert=0.1*dnorm(1:50,25,5)/max(dnorm(1:50,25,5)),#
				waning.maternal.par=wanes[j],period=pd[k],Tmax=Tmax,#
				mu.sick=1.5)#
		st[j,k] <- mean(diff(colSums(a1[[1]][,(Tmax-500):Tmax])))#
		}#
	print(j)#
	}#
	image(wanes,pd,(st),xlab="waning rate", ylab="periodicity of outbreaks")#
#
	matplot(wanes,(st), type="b",pch=19)#
#
	plot(1:50,exp(-wanes[1]*(1:50)), type="l", ylim=c(0,1))#
	points(1:50,exp(-wanes[2]*(1:50)), type="l",col=2)#
	points(1:50,exp(-wanes[3]*(1:50)), type="l",col=1)
#
	par(mfrow=c(2,2)) #pop structure#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[2]],tlim])), xlab="time", ylab="age",main="M")#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[3]],tlim])), xlab="time", ylab="age",main="S")#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[4]],tlim])), xlab="time", ylab="age",main="I")#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[5]],tlim])), xlab="time", ylab="age",main="R")
#
	##compare across a range of periodicities three different wanings#
	wanes <- seq(1e-9,0.6,length=5)#
	pd <- c(2,50)#10,,50,100)#
	st <- matrix(NA,length(wanes),length(pd))#
	Tmax <- 3000#
	for (j in 1:length(wanes)) { #
		for (k in 1:length(pd)) { #
		a1<-TrackPopStruct(fert=0.1*dnorm(1:50,25,5)/max(dnorm(1:50,25,5)),#
				waning.maternal.par=wanes[j],period=pd[k],Tmax=Tmax,#
				mu.sick=1.5)#
		st[j,k] <- mean(diff(colSums(a1[[1]][,(Tmax-500):Tmax])))#
		}#
	print(j)#
	}#
	image(wanes,pd,(st),xlab="waning rate", ylab="periodicity of outbreaks")#
#
	matplot(wanes,(st), type="b",pch=19)#
#
	plot(1:50,exp(-wanes[1]*(1:50)), type="l", ylim=c(0,1))#
	points(1:50,exp(-wanes[2]*(1:50)), type="l",col=2)#
	points(1:50,exp(-wanes[3]*(1:50)), type="l",col=1)
#
	##compare across a range of periodicities three different wanings#
	wanes <- seq(1e-9,0.3,length=5)#
	pd <- c(2,50)#10,,50,100)#
	st <- matrix(NA,length(wanes),length(pd))#
	Tmax <- 3000#
	for (j in 1:length(wanes)) { #
		for (k in 1:length(pd)) { #
		a1<-TrackPopStruct(fert=0.1*dnorm(1:50,25,5)/max(dnorm(1:50,25,5)),#
				waning.maternal.par=wanes[j],period=pd[k],Tmax=Tmax,#
				mu.sick=1.5)#
		st[j,k] <- mean(diff(colSums(a1[[1]][,(Tmax-500):Tmax])))#
		}#
	print(j)#
	}#
	image(wanes,pd,(st),xlab="waning rate", ylab="periodicity of outbreaks")#
#
	matplot(wanes,(st), type="b",pch=19)#
#
	plot(1:50,exp(-wanes[1]*(1:50)), type="l", ylim=c(0,1))#
	points(1:50,exp(-wanes[2]*(1:50)), type="l",col=2)#
	points(1:50,exp(-wanes[3]*(1:50)), type="l",col=1)
#
	##compare across a range of periodicities three different wanings#
	wanes <- seq(1e-9,0.2,length=5)#
	pd <- c(2,50)#10,,50,100)#
	st <- matrix(NA,length(wanes),length(pd))#
	Tmax <- 3000#
	for (j in 1:length(wanes)) { #
		for (k in 1:length(pd)) { #
		a1<-TrackPopStruct(fert=0.1*dnorm(1:50,25,5)/max(dnorm(1:50,25,5)),#
				waning.maternal.par=wanes[j],period=pd[k],Tmax=Tmax,#
				mu.sick=1.5)#
		st[j,k] <- mean(diff(colSums(a1[[1]][,(Tmax-500):Tmax])))#
		}#
	print(j)#
	}#
	image(wanes,pd,(st),xlab="waning rate", ylab="periodicity of outbreaks")#
#
	matplot(wanes,(st), type="b",pch=19)#
#
	plot(1:50,exp(-wanes[1]*(1:50)), type="l", ylim=c(0,1))#
	points(1:50,exp(-wanes[2]*(1:50)), type="l",col=2)#
	points(1:50,exp(-wanes[3]*(1:50)), type="l",col=1)
#
	##compare across a range of periodicities three different wanings#
	wanes <- seq(1e-9,0.05,length=5)#
	pd <- c(2)#,50)#10,,50,100)#
	st <- matrix(NA,length(wanes),length(pd))#
	Tmax <- 3000#
	for (j in 1:length(wanes)) { #
		for (k in 1:length(pd)) { #
		a1<-TrackPopStruct(fert=0.1*dnorm(1:50,25,5)/max(dnorm(1:50,25,5)),#
				waning.maternal.par=wanes[j],period=pd[k],Tmax=Tmax,#
				mu.sick=1.5)#
		st[j,k] <- mean(diff(colSums(a1[[1]][,(Tmax-500):Tmax])))#
		}#
	print(j)#
	}#
	image(wanes,pd,(st),xlab="waning rate", ylab="periodicity of outbreaks")#
#
	matplot(wanes,(st), type="b",pch=19)#
#
	plot(1:50,exp(-wanes[1]*(1:50)), type="l", ylim=c(0,1))#
	points(1:50,exp(-wanes[2]*(1:50)), type="l",col=2)#
	points(1:50,exp(-wanes[3]*(1:50)), type="l",col=1)
#
	##compare across a range of periodicities three different wanings#
	wanes <- seq(1e-9,0.05,length=5)#
	pd <- c(2,100)#,50)#10,,50,100)#
	st <- matrix(NA,length(wanes),length(pd))#
	Tmax <- 3000#
	for (j in 1:length(wanes)) { #
		for (k in 1:length(pd)) { #
		a1<-TrackPopStruct(fert=0.1*dnorm(1:50,25,5)/max(dnorm(1:50,25,5)),#
				waning.maternal.par=wanes[j],period=pd[k],Tmax=Tmax,#
				mu.sick=1.5)#
		st[j,k] <- mean(diff(colSums(a1[[1]][,(Tmax-500):Tmax])))#
		}#
	print(j)#
	}#
	image(wanes,pd,(st),xlab="waning rate", ylab="periodicity of outbreaks")#
#
	matplot(wanes,(st), type="b",pch=19)#
#
	plot(1:50,exp(-wanes[1]*(1:50)), type="l", ylim=c(0,1))#
	points(1:50,exp(-wanes[2]*(1:50)), type="l",col=2)#
	points(1:50,exp(-wanes[3]*(1:50)), type="l",col=1)
#
	par(mfrow=c(2,2)) #pop structure#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[2]],tlim])), xlab="time", ylab="age",main="M")#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[3]],tlim])), xlab="time", ylab="age",main="S")#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[4]],tlim])), xlab="time", ylab="age",main="I")#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[5]],tlim])), xlab="time", ylab="age",main="R")
tlim<-2500:3000
#
	par(mfrow=c(2,2)) #pop structure#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[2]],tlim])), xlab="time", ylab="age",main="M")#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[3]],tlim])), xlab="time", ylab="age",main="S")#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[4]],tlim])), xlab="time", ylab="age",main="I")#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[5]],tlim])), xlab="time", ylab="age",main="R")
tlim<-2500:2700
#
	par(mfrow=c(2,2)) #pop structure#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[2]],tlim])), xlab="time", ylab="age",main="M")#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[3]],tlim])), xlab="time", ylab="age",main="S")#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[4]],tlim])), xlab="time", ylab="age",main="I")#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[5]],tlim])), xlab="time", ylab="age",main="R")
#
	par(mfrow=c(2,2)) #pop structure#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[2]][1:10],tlim])), xlab="time", ylab="age",main="M")#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[3]][1:10],tlim])), xlab="time", ylab="age",main="S")#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[4]][1:10],tlim])), xlab="time", ylab="age",main="I")#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[5]][1:10],tlim])), xlab="time", ylab="age",main="R")
a1[[2]]
#
	par(mfrow=c(2,2)) #pop structure#
	image(tlim,c(1:(nrow(a1$nt.store)/4))[1:10],t(log(a1[[1]][a1[[2]][1:10],tlim])), xlab="time", ylab="age",main="M")#
	image(tlim,c(1:(nrow(a1$nt.store)/4))[1:10],t(log(a1[[1]][a1[[3]][1:10],tlim])), xlab="time", ylab="age",main="S")#
	image(tlim,c(1:(nrow(a1$nt.store)/4))[1:10],t(log(a1[[1]][a1[[4]][1:10],tlim])), xlab="time", ylab="age",main="I")#
	image(tlim,c(1:(nrow(a1$nt.store)/4))[1:10],t(log(a1[[1]][a1[[5]][1:10],tlim])), xlab="time", ylab="age",main="R")
#
#
## Function to simulate evolution of maternal immunity   #########################
# Need: M, S, I, R classes, structured over age#
#  S gives birth to S#
#  I and R give birth to M#
#  I dies at a rate defined by age survival * mu.sick#
#  Infection rate imposed externally (because want to explore different periodicities, etc)#
#
# Parameter explored = duration maternal immunity #
# Potential extra adv - if you move into R maybe you have slightly higher mortality because part of your memory is tied up. #
#
# Do yearly time-step (cos why not)#
# Calculate lambda_s#
#
#
#
## Funtion to build survival T transitions#
## an infection #
# #
buildTMatrix <- function(age.classes=1:50,#
			mort=c(0.18950, 0.04376, 0.02816, 0.01862, 0.01212, 0.00940, 0.00789, #
0.00682, 0.00589, 0.00568, 0.00601, 0.00574, 0.00546,0.00516, 0.00445, 0.00437, 0.00479, 0.00531, #
0.00556, 0.00554, 0.00584, 0.00675, 0.00759, 0.00702, 0.00653, 0.00650, 0.00652, 0.00685, 0.00858, #
0.00888, 0.00782, 0.00756, 0.00784, 0.00808, 0.00809, 0.00888, 0.00994, 0.00983, 0.00967, 0.00972,#
0.00994, 0.00948, 0.00948, 0.00953, 0.01012, 0.01049, 0.01065, 0.01109, 0.01130, 0.01152),   #one for every age class (danish 1835 cohort here)#
			mu.sick=1.01,	#how much more likely sick are to die#
			beta=c(0.1), #
			waning.maternal.par=1,#
			waning.immunity=0){#
#
	nage <- length(age.classes)#
	if (length(beta)==1) beta <- rep(beta,nage)#
	if (length(waning.immunity)==1) waning.immunity <- rep(waning.immunity,nage)	#
#
	waning.maternal<-exp(-waning.maternal.par*(age.classes))#
#
	mat1 <- matrix(0,4,4)#
#
	Tmat <- matrix(0,4*nage,4*nage)#
	for (j in 1:nage) { #
		#fill in epi matrix#
		mat1[] <- 0#
		mat1[1,1] <- waning.maternal[j]#
		mat1[2,1] <- 1-waning.maternal[j]#
		mat1[2,2] <- 1-beta[j]#
		mat1[3,2] <- beta[j]#
		mat1[4,3] <- 1#
		mat1[4,4] <- 1-waning.immunity[j]#
		mat1[2,4] <- waning.immunity[j]#
		#put in surv#
		surv <- rep(1-mort[j],4); surv[3] <- 1-(mu.sick*mort[j])#
		#fill in Tmatrix#
		if (j!=nage) { #
			Tmat[(j*4+1):(j*4+4),((j-1)*4+1):(j*4)] <- mat1*surv#
		} else { #
			Tmat[((j-1)*4+1):(j*4),((j-1)*4+1):(j*4)] <- mat1#
		}#
	}#
#
	return(Tmat)	#
#
}#
#
#
## Funtion to build fertility transitions#
## (prob only needs to happen once  #
# #
buildFMatrix <- function(age.classes=1:50,#
			fert=dnorm(1:50,25,5)){ 	#one for every age class#
	fert[age.classes<15] <- 0#
#
	nage <- length(age.classes)#
#
	Fmat <- matrix(0,4*nage,4*nage)#
	for (j in 1:nage) { #
		Fmat[1,((j-1)*4+1):(j*4)] <- c(0,0,fert[j],fert[j]) #the mat immune#
		Fmat[2,((j-1)*4+1):(j*4)]<- c(fert[j],fert[j],0,0) #the susceptible (mom didn't get sick)#
	}#
#
	return(Fmat)#
}#
#
#
#
#
## Build different yearly periodicity in trans#
##
periodTrans <- function(period=100,alpha=0.2,mag=0.01,Tmax=10000) { #
#
	u <- alpha*cos(2*pi*(1:Tmax)/period)#
	return(mag*(1+u))#
}#
#
#
## Build a function to get stoch rate increase#
##
##
StochGrowthRate <- function(age.classes=1:50,#
			mort=c(0.18950, 0.04376, 0.02816, 0.01862, 0.01212, 0.00940, 0.00789, #
0.00682, 0.00589, 0.00568, 0.00601, 0.00574, 0.00546,0.00516, 0.00445, 0.00437, 0.00479, 0.00531, #
0.00556, 0.00554, 0.00584, 0.00675, 0.00759, 0.00702, 0.00653, 0.00650, 0.00652, 0.00685, 0.00858, #
0.00888, 0.00782, 0.00756, 0.00784, 0.00808, 0.00809, 0.00888, 0.00994, 0.00983, 0.00967, 0.00972,#
0.00994, 0.00948, 0.00948, 0.00953, 0.01012, 0.01049, 0.01065, 0.01109, 0.01130, 0.01152),   #one for every age class (danish 1835 cohort here)#
			mu.sick=1.01,	#how much more likely sick are to die#
			beta=c(0.1), #
			waning.maternal.par=1,#
			waning.immunity=0,#
			fert=0.1*dnorm(1:50,25,5)/max(dnorm(1:50,25,5)),#
			period=100,alpha=0.2,mag=0.01,Tmax=5000, n.runin=1000){#
			require(MASS)#
			#
			#get Fmatrix (won't change)#
			Fmat <- buildFMatrix(age.classes=age.classes,fert=fert)#
			#
			#get seasonal trans#
			seasTrans <- pmax(pmin(periodTrans(period=period,alpha=alpha,mag=mag,Tmax=Tmax),1),0)		#
#
			nt<-rep(0,length(age.classes)*4)#
			nt[1+seq(1,length(age.classes)*4,by=4)] <- 1#
			nt[2+seq(1,5*4,by=4)] <- 1#
			Rt<-rep(NA,Tmax)#
			#
			for (t in 1:Tmax) {#
				#build Tmat	#
				Tmat <- buildTMatrix(age.classes=age.classes,#
				mort=mort,   #one for every age class (danish 1835 cohort here)#
				mu.sick=mu.sick,	#how much more likely sick are to die#
				beta=seasTrans[t], #
				waning.maternal.par=waning.maternal.par,#
				waning.immunity=waning.immunity)#
#
				nt1<-(Tmat+Fmat) %*% nt	#
				sum.nt1<-sum(nt1)#
				Rt[t]<-log(sum.nt1)#
				nt<-nt1/sum.nt1#
				#
			}#
			#
			res <- mean(Rt[n.runin:Tmax],na.rm=TRUE)#
			return(res)#
		}#
#
#
#
#
## Build a function to get stoch rate increase#
##
##
TrackPopStruct <- function(age.classes=1:50,#
			mort=c(0.18950, 0.04376, 0.02816, 0.01862, 0.01212, 0.00940, 0.00789, #
0.00682, 0.00589, 0.00568, 0.00601, 0.00574, 0.00546,0.00516, 0.00445, 0.00437, 0.00479, 0.00531, #
0.00556, 0.00554, 0.00584, 0.00675, 0.00759, 0.00702, 0.00653, 0.00650, 0.00652, 0.00685, 0.00858, #
0.00888, 0.00782, 0.00756, 0.00784, 0.00808, 0.00809, 0.00888, 0.00994, 0.00983, 0.00967, 0.00972,#
0.00994, 0.00948, 0.00948, 0.00953, 0.01012, 0.01049, 0.01065, 0.01109, 0.01130, 0.01152),   #one for every age class (danish 1835 cohort here)#
			mu.sick=1.1,	#1.01 how much more likely sick are to die#
			beta=c(0.1), #
			waning.maternal.par=1,#
			waning.immunity=0,#
			fert=0.1*dnorm(1:50,25,5)/max(dnorm(1:50,25,5)),#
			period=100,alpha=0.6,mag=0.8,Tmax=5000, n.runin=1000){#
			require(MASS)#
			#
			#get Fmatrix (won't change)#
			Fmat <- buildFMatrix(age.classes=age.classes,fert=fert)#
			#
			#get seasonal trans#
			seasTrans <- pmax(pmin(periodTrans(period=period,alpha=alpha,mag=mag,Tmax=Tmax),1),0)		#
#
			nt<-rep(0,length(age.classes)*4)#
			nt[1+seq(1,length(age.classes)*4,by=4)] <- 1#
			nt[2+seq(1,5*4,by=4)] <- 1#
			nt.store<-matrix(NA,length(age.classes)*4,Tmax)#
			#
			for (t in 1:Tmax) {#
				#build Tmat	#
				Tmat <- buildTMatrix(age.classes=age.classes,#
				mort=mort,   #one for every age class (danish 1835 cohort here)#
				mu.sick=mu.sick,	#how much more likely sick are to die#
				beta=seasTrans[t], #
				waning.maternal.par=waning.maternal.par,#
				waning.immunity=waning.immunity)#
#
				nt1<-(Tmat+Fmat) %*% nt	#
				nt.store[,t]<-nt1#
				nt<-nt1#
				#
			}#
			#
			m.inds <- seq(1,length(age.classes)*4,by=4)#
			s.inds <- m.inds+1			#
			i.inds <- m.inds+2			#
			r.inds <- m.inds+3			#
#
			return(list(nt.store=nt.store,m.inds=m.inds,s.inds=s.inds,i.inds=i.inds,r.inds=r.inds,seasTrans=seasTrans))#
		}#
#
#
#
picTrack <- function(){#
	a1<-TrackPopStruct(period=10)#
	b1<-TrackPopStruct(period=100)#
#
	par(mfrow=c(2,2),bty="l")#
	tlim <- 1000:1200#
	plot(colSums(a1[[1]][a1[[2]],tlim]), xlab="time", ylab="M", type="l")#
	points(colSums(	b1[[1]][b1[[2]],tlim]), type="l", col=2)#
	plot(colSums(a1[[1]][a1[[3]],tlim]), xlab="time", ylab="S", type="l")#
	points(colSums(	b1[[1]][b1[[3]],tlim]), type="l", col=2)#
	plot(colSums(a1[[1]][a1[[4]],tlim]), xlab="time", ylab="I", type="l")#
	points(colSums(	b1[[1]][b1[[4]],tlim]), type="l", col=2)#
	plot(colSums(a1[[1]][a1[[5]],tlim]), xlab="time", ylab="R", type="l")#
	points(colSums(	b1[[1]][b1[[5]],tlim]), type="l", col=2)#
#
	par(mfrow=c(2,2)) #pop structure#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[2]],tlim])), xlab="time", ylab="age",main="M")#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[3]],tlim])), xlab="time", ylab="age",main="S")#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[4]],tlim])), xlab="time", ylab="age",main="I")#
	image(tlim,1:(nrow(a1$nt.store)/4),t(log(a1[[1]][a1[[5]],tlim])), xlab="time", ylab="age",main="R")#
#
	#total pop size compare#
	plot(colSums(a1[[1]][,tlim]), xlab="time", ylab="M", type="l")#
	points(colSums(b1[[1]][,tlim]), type="l",col=2)	#
#
	#highlights that problem with comparison across different seasonalities is that the more frequent have higher risk death anyway#
	mean(diff(colSums(a1[[1]][,tlim])))#
	mean(diff(colSums(b1[[1]][,tlim])))#
#
#
	##compare across a range of periodicities three different wanings#
	wanes <- seq(1e-9,0.6,length=5)#
	pd <- c(2,50)#10,,50,100)#
	st <- matrix(NA,length(wanes),length(pd))#
	Tmax <- 2000#
	for (j in 1:length(wanes)) { #
		for (k in 1:length(pd)) { #
		a1<-TrackPopStruct(fert=0.1*dnorm(1:50,25,5)/max(dnorm(1:50,25,5)),#
				waning.maternal.par=wanes[j],period=pd[k],Tmax=Tmax,#
				mu.sick=1.5)#
		st[j,k] <- mean(diff(colSums(a1[[1]][,(Tmax-500):Tmax])))#
		}#
	print(j)#
	}#
	image(wanes,pd,(st),xlab="waning rate", ylab="periodicity of outbreaks")#
#
	matplot(wanes,(st), type="b",pch=19)#
#
	plot(1:50,exp(-wanes[1]*(1:50)), type="l", ylim=c(0,1))#
	points(1:50,exp(-wanes[2]*(1:50)), type="l",col=2)#
	points(1:50,exp(-wanes[3]*(1:50)), type="l",col=1)#
#
#
#
}
#
#
	##compare across a range of periodicities three different wanings#
	wanes <- seq(1e-9,0.6,length=5)#
	pd <- c(2,50)#10,,50,100)#
	st <- matrix(NA,length(wanes),length(pd))#
	Tmax <- 2000#
	for (j in 1:length(wanes)) { #
		for (k in 1:length(pd)) { #
		a1<-TrackPopStruct(fert=0.1*dnorm(1:50,25,5)/max(dnorm(1:50,25,5)),#
				waning.maternal.par=wanes[j],period=pd[k],Tmax=Tmax,#
				mu.sick=1.5)#
		st[j,k] <- mean(diff(colSums(a1[[1]][,(Tmax-500):Tmax])))#
		}#
	print(j)#
	}#
	image(wanes,pd,(st),xlab="waning rate", ylab="periodicity of outbreaks")#
#
	matplot(wanes,(st), type="b",pch=19)#
#
	plot(1:50,exp(-wanes[1]*(1:50)), type="l", ylim=c(0,1))#
	points(1:50,exp(-wanes[2]*(1:50)), type="l",col=2)#
	points(1:50,exp(-wanes[3]*(1:50)), type="l",col=1)
wanes <- seq(1e-9,0.6,length=50)#
	pd <- c(2,10,50,100,500)#
	st <- matrix(NA,length(wanes),length(pd))#
	Tmax <- 2000#
	for (j in 1:length(wanes)) { #
		for (k in 1:length(pd)) { #
		a1<-TrackPopStruct(fert=0.1*dnorm(1:50,25,5)/max(dnorm(1:50,25,5)),#
				waning.maternal.par=wanes[j],period=pd[k],Tmax=Tmax,#
				mu.sick=1.5)#
		st[j,k] <- mean(diff(colSums(a1[[1]][,(Tmax-500):Tmax])))#
		}#
	print(j)#
	}#
	image(wanes,pd,(st),xlab="waning rate", ylab="periodicity of outbreaks")#
#
	matplot(wanes,(st), type="b",pch=19)#
#
	plot(1:50,exp(-wanes[1]*(1:50)), type="l", ylim=c(0,1))#
	points(1:50,exp(-wanes[2]*(1:50)), type="l",col=2)#
	points(1:50,exp(-wanes[3]*(1:50)), type="l",col=1)
#
setwd("/Users/cjessicametcalf/Documents/workspace/IPMpack/pkg/")#
source("R/IPMpack-Util.R")#
source("R/IPMpack-Base.R")#
source("R/IPMpack-Impl.R")
source("/Users/cjessicametcalf/Documents/IPM/TreesIndia-Util.R")
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
FigureFour()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
FigureFour()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
FigureFour()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
FigureFour()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
FigureFour()
#
FigureFive <- function(){#
#
    sp.list <- c("vain", "myda", "hubr")#
    sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
    #
    dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
    dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
#
   #this is the time-adjusted#
     # 1. MECHANISTIC#
    #
    #this is the time-adjusted#
    dff$incr <- dff$sizeNext-dff$size#
#
    ylims1 <- pmax(range(dff$incr[dff$spcode==sp.list[1]],na.rm=TRUE)*c(1,2),-5)#
    ylims2 <- pmax(range(dff$incr[dff$spcode==sp.list[2]],na.rm=TRUE)*c(1,2),-5)#
    ylims3 <- pmax(range(dff$incr[dff$spcode==sp.list[3]],na.rm=TRUE)*c(1,2),-5)#
#
    res1 <- growthModelCompMech(dff[dff$spcode==sp.list[1],],makePlot=TRUE, ylim=ylims1)#
    addPdfGrowthPic(sizesPlotAt=c(20,50,60),sizeRange=c(20,400),scalar=100,growthObjList=res1$growthObjects,col=1:length(res1$growthObjects))#
    res2 <- growthModelCompMech(dff[dff$spcode==sp.list[2],],makePlot=TRUE,  ylim=ylims2)#
    addPdfGrowthPic(sizesPlotAt=c(20,50,60),sizeRange=c(20,400),scalar=100,growthObjList=res2$growthObjects,col=1:length(res2$growthObjects))#
    res3 <- growthModelCompMech(dff[dff$spcode==sp.list[3],],makePlot=TRUE,  ylim=ylims3)#
    addPdfGrowthPic(sizesPlotAt=c(20,50,60),sizeRange=c(20,400),scalar=100,growthObjList=res3$growthObjects,col=1:length(res3$growthObjects))#
    #
}
FigureFive()
#
## This file will containing a suite of different growth functions. For each, there will be#
# 1. a setClass#
# 2. a function predicting size or incr as function size and parameters#
# 3. a likelihood function that can be fed this function and data to optim#
# 3. a growth method for the midpoint rule, and for the cumulative rule#
#
#
# Currently forms are taken from last column in Table 1, Paine et al. MEE, 2011#
#
## THE GOMPERTZ ##################################################################
#
#
# Create a generic growth object  #
setClass("growthObj.Gompertz",#
         representation(paras="numeric",#
                        sd="numeric",#
                        logLik="numeric"))#
#
# Function#
Gompertz <- function(size,paras) {#
    u <- size*paras[1]*log(paras[2]/size)#
    return(u)#
}#
# Pred time course#
Gompertz.overT <- function(size,paras,size0,maxT) {#
    paras[2]*(size0/paras[2])^exp(-paras[1]*(1:maxT))#
}#
#
# Likelihood for optim#
wrapGompertz <- function(par, dataf) {#
    par <- exp(par) #they all need to be positive#
    pred <- Gompertz(size=dataf$size, paras=par[1:2])#
   #
    logLik <- dnorm(dataf$incr,pred,par[3], log=TRUE)#
    #ss <- sum((dataf$incr[!is.na(dataf$incr) & !is.na(dataf$size)]/#
    #           dataf$size[!is.na(dataf$incr) & !is.na(dataf$size)]-#
    #           pred[!is.na(dataf$incr) & !is.na(dataf$size)])^2)#
    #return(ss)#
    return(-sum(logLik[!is.na(dataf$incr) & !is.na(dataf$size)])) #
} #
#
#
# Create wrapper to fit and return a Gompertz growth function using max like#
getGompertz <- function(dataf, par=c(8e-4,2.5,1), plot=FALSE,...) {#
    tmp <- optim(par=log(par),wrapGompertz, dataf=dataf, method="Nelder-Mead")#
    print(tmp)#
    gr1 <- new("growthObj.Gompertz")#
    gr1@paras <- exp(tmp$par[1:2])#
    gr1@sd <- exp(tmp$par[3])#
    gr1@logLik <- -tmp$value#
#
    if(plot) {#
        pred <- Gompertz(size=dataf$size, paras=exp(tmp$par[1:2])) #
        plot(pred,dataf$incr,pch=19,ylab="Observed", xlab="Predicted",...)#, ylim=c(0,0.02))#
        abline(0,1,col=2)#
    }#
#
    return(gr1)#
}#
#
#
# Create wrapper to fit and return a Gompertz growth function using gnls (to allow for heterosc)#
#Gompertz function with named parameters...#
Gompertz2 <- function(X,para1,para2) {#
    para1 <- exp(para1)#
    para2 <- exp(para2)#
    u <- X*para1*log(para2/X)#
    return(u)#
}#
#gnls wrapper#
getGompertz.gnls <- function(dataf,  plot=FALSE) {#
    #prepare data#
    dat.asymp <- data.frame(Y=dataf$incr,X=dataf$size)#
    dat.asymp <- dat.asymp[!is.na(dat.asymp$X) & !is.na(dat.asymp$Y),]#
    dat.asymp <- dat.asymp[dat.asymp$Y>0,]#
    #starting values#
    a1<-getGompertz(dff,plot=T)#
    #fit#
    fit.gomp <- gnls(Y ~ Gompertz2(X, para1,para2),#
                     start=log(c(para1=a1@paras[1],para2=a1@paras[2])),#
                     data = dat.asymp, weights= varExp(form = ~ fitted(.)),#
                     control=gnlsControl(nlsTol=0.1))#
    out.gomp <- output.gomp.gnls(fit.gomp, Xes_asymp$X, CI = T)#
#
    #put this into a growth object#
    #gr1 <- new("growthObj.Gompertz.hetersc")#
    #gr1@paras <- exp(tmp$par[1:2])#
    #gr1@sd <- exp(tmp$par[3])#
    #gr1@logLik <- -tmp$value#
#
}#
#
# Define a new growth method (classic midpoint rule approach)#
setMethod("growth", c("numeric", "numeric", "numeric", "growthObj.Gompertz"), #
          function(size, sizeNext, cov, growthObj) { #
              mux <- size+Gompertz(size=size, paras=growthObj@paras) #
              sigmax <- growthObj@sd #
              u <- dnorm(sizeNext, mux, sigmax, log = F) #
              return(u)#
          })#
#
#
# Define a new growth method (cumulative  approach)#
setMethod("growthCum", #
          c("numeric","numeric","numeric","growthObj.Gompertz"),#
          function(size,sizeNext,cov,growthObj){#
              mux <- size+Gompertz(size=size, paras=growthObj@paras) #
              sigmax <-  growthObj@sd#
              u <- pnorm(sizeNext,mux,sigmax,log=FALSE)  #
              return(u);#
          })#
#
#
## THE FOUR PARAMETER LOGISTIC ##################################################################
#
#
# Create a generic growth object  #
setClass("growthObj.Logistic4",#
         representation(paras="numeric",#
                        sd="numeric",logLik="numeric"))#
#
# Function#
Logistic4 <- function(size,paras) {#
    u <- (paras[1]*(size-paras[3]))*((paras[2]-size)/(paras[2]-paras[3]))#
    return(u)#
}#
#Over t#
Logistic4.overT <- function(size,paras,size0,maxT) {#
    P <- paras[2]-paras[3]-size0#
    u <- paras[3]+size0*((paras[2]-paras[3])/(size0+P*exp(-(paras[1]*(1:maxT)))))#
    return(u)#
}#
#
# Likelihood for optim#
wrapLogistic4 <- function(par, dataf) {#
    par <- exp(par) #they all need to be positive#
    pred <- Logistic4(dataf$size, paras=par[1:3]) #
    logLik <- dnorm(dataf$incr,pred,par[4], log=TRUE)#
    return(-sum(logLik[!is.na(dataf$incr) & !is.na(dataf$size)])) #
} #
#
#
# Create wrapper to fit and return #
getLogistic4 <- function(dataf, par=c(0.02,10,0.001,1), plot=FALSE,...) {#
    tmp <- optim(par=log(par),wrapLogistic4, dataf=dataf, method="Nelder-Mead")  #
    print(tmp)#
     gr1 <- new("growthObj.Logistic4")#
    gr1@paras <- exp(tmp$par[1:3])#
    gr1@sd <- exp(tmp$par[4])#
    gr1@logLik <- -tmp$value#
    #
    if(plot) {#
        pred <- Logistic4(size=dataf$size,par=exp(tmp$par[1:3])) #
        plot(pred,dataf$incr,pch=19,ylab="Observed", xlab="Predicted",...)#, ylim=c(0,0.02))#
        abline(0,1,col=2)#
    }#
#
#
    return(gr1)#
}#
#
#
#
#
# Define a new growth method (classic midpoint rule approach)#
setMethod("growth", c("numeric", "numeric", "numeric", "growthObj.Logistic4"), #
          function(size, sizeNext, cov, growthObj) { #
              mux <- size+Logistic4(size=size, paras=growthObj@paras) #
              sigmax <- growthObj@sd #
              u <- dnorm(sizeNext, mux, sigmax, log = F) #
              return(u)#
          })#
#
#
# Define a new growth method (cumulative  approach)#
setMethod("growthCum", #
          c("numeric","numeric","numeric","growthObj.Logistic4"),#
          function(size,sizeNext,cov,growthObj){#
              mux <- size+Logistic4(size=size, paras=growthObj@paras) #
              sigmax <-  growthObj@sd#
              u <- pnorm(sizeNext,mux,sigmax,log=FALSE)  #
              return(u);#
          })#
#
#
#
#
## THE THREE PARAMETER LOGISTIC ##################################################################
#
#
# Create a generic growth object  #
setClass("growthObj.Logistic3",#
         representation(paras="numeric",#
                        sd="numeric",logLik="numeric"))#
#
# Function#
Logistic3 <- function(size,paras) {#
    size*(paras[1]*(1-size/paras[2]))#
}#
# over time#
Logistic3.overT <- function(size,paras,size0,maxT) {#
    size0*paras[2]/(size0+(paras[2]-size0)*exp(-(paras[1]*(1:maxT))))#
}#
#
# Likelihood for optim#
wrapLogistic3 <- function(par, dataf) {#
    par <- exp(par)#
    pred <- Logistic3(size=dataf$size, paras=par[1:2]) #
    logLik <- dnorm(dataf$incr,pred,par[3], log=TRUE)#
    return(-sum(logLik[!is.na(dataf$incr) & !is.na(dataf$size)])) #
} #
#
#
# Create wrapper to fit and return a Gompertz growth function#
getLogistic3 <- function(dataf, par=c(0.2,77,1), plot=FALSE,...) {#
    tmp <- optim(par=log(par),wrapLogistic3, dataf=dataf, method="Nelder-Mead")  #
    gr1 <- new("growthObj.Logistic3")#
    gr1@paras <- exp(tmp$par[1:2])#
    gr1@sd <- exp(tmp$par[3])#
    gr1@logLik <- -tmp$value#
#
    if(plot) {#
        pred <- Logistic3(size=dataf$size,par=exp(tmp$par[1:3])) #
        plot(pred,dataf$incr,pch=19,ylab="Observed", xlab="Predicted",...)#, ylim=c(0,0.02))#
        abline(0,1,col=2)#
    }#
#
#
#
    return(gr1)#
}#
#
#
#
# Define a new growth method (classic midpoint rule approach)#
setMethod("growth", c("numeric", "numeric", "numeric", "growthObj.Logistic3"), #
          function(size, sizeNext, cov, growthObj) { #
              mux <- size+Logistic3(size=size, paras=growthObj@paras) #
              sigmax <- growthObj@sd #
              u <- dnorm(sizeNext, mux, sigmax, log = F) #
              return(u)#
          })#
#
#
# Define a new growth method (cumulative  approach)#
setMethod("growthCum", #
          c("numeric","numeric","numeric","growthObj.Logistic3"),#
          function(size,sizeNext,cov,growthObj){#
              mux <- size+Logistic3(size=size, paras=growthObj@paras) #
              sigmax <-  growthObj@sd#
              u <- pnorm(sizeNext,mux,sigmax,log=FALSE)  #
              return(u);#
          })#
#
#
#
#
#
#
## THE MONOMOLECULAR ##################################################################
#
#
# Create a generic growth object  #
setClass("growthObj.Monomolecular",#
         representation(paras="numeric",#
                        sd="numeric",logLik="numeric"))#
#
# Function#
Monomolecular <- function(size,paras) {#
    paras[1]*(paras[2]-size)#
}#
#Over t#
Monomolecular.overT <- function(size,paras,size0,maxT) {#
    paras[2]-exp(-(paras[1]*(1:maxT)))*(paras[2]-size0)#
}#
#
# Likelihood for optim#
wrapMonomolecular <- function(par, dataf) {#
    par <- exp(par)#
    pred <- Monomolecular(size=dataf$size, paras=par[1:2]) #
    logLik <- dnorm(dataf$incr,pred,par[3], log=TRUE)#
    return(-sum(logLik[!is.na(dataf$incr) & !is.na(dataf$size)])) #
} #
#
#
# Create wrapper to fit and return a Gompertz growth function#
getMonomolecular <- function(dataf, par=c(0.002,77,1), plot=FALSE,...) {#
    tmp <- optim(par=log(par),wrapMonomolecular, dataf=dataf, method="Nelder-Mead")  #
    gr1 <- new("growthObj.Monomolecular")#
    gr1@paras <- exp(tmp$par[1:2])#
    gr1@sd <- exp(tmp$par[3])#
    gr1@logLik <- -tmp$value#
#
    if(plot) {#
        pred <- Monomolecular(size=dataf$size,par=exp(tmp$par[1:2])) #
        plot(pred,dataf$incr,pch=19,ylab="Observed", xlab="Predicted",...)#, ylim=c(0,0.02))#
        abline(0,1,col=2)#
    }#
    return(gr1)#
}#
#
#
#
# Define a new growth method (classic midpoint rule approach)#
setMethod("growth", c("numeric", "numeric", "numeric", "growthObj.Monomolecular"), #
          function(size, sizeNext, cov, growthObj) { #
              mux <- size+Monomolecular(size=size, paras=growthObj@paras) #
              sigmax <- growthObj@sd #
              u <- dnorm(sizeNext, mux, sigmax, log = F) #
              return(u)#
          })#
#
#
# Define a new growth method (cumulative  approach)#
setMethod("growthCum", #
          c("numeric","numeric","numeric","growthObj.Monomolecular"),#
          function(size,sizeNext,cov,growthObj){#
              mux <- size+Monomolecular(size=size, paras=growthObj@paras) #
              sigmax <-  growthObj@sd#
              u <- pnorm(sizeNext,mux,sigmax,log=FALSE)  #
              return(u);#
          })#
#
#
#
###### POWER-LAW #######################################
#
# Create a generic growth object  #
setClass("growthObj.PowerLaw",#
         representation(paras="numeric",#
                        sd="numeric",logLik="numeric"))#
#
# Function#
PowerLaw <- function(size,paras) {#
    paras[1]*(size^paras[2])#
}#
#Over t#
PowerLaw.overT <- function(size,paras,size0,maxT) {#
    ((size0^(1-paras[2]))+paras[1]*(1:maxT)*(1-paras[2]))^(1/(1-paras[2]))#
}#
#
#
# Likelihood for optim#
wrapPowerLaw <- function(par, dataf) {#
    par <- exp(par)#
    pred <- PowerLaw(size=dataf$size, paras=par[1:2]) #
    logLik <- dnorm(dataf$incr,pred,par[3], log=TRUE)#
    return(-sum(logLik[!is.na(dataf$incr) & !is.na(dataf$size)])) #
} #
#
#
# Create wrapper to fit and return a Gompertz growth function#
getPowerLaw <- function(dataf, par=c(0.002,0.01,1), plot=FALSE,...) {#
    tmp <- optim(par=log(par),wrapPowerLaw, dataf=dataf, method="Nelder-Mead")  #
    gr1 <- new("growthObj.PowerLaw")#
    gr1@paras <- exp(tmp$par[1:2])#
    gr1@sd <- exp(tmp$par[3])#
    gr1@logLik <- -tmp$value#
#
    if(plot) {#
        pred <- PowerLaw(size=dataf$size,par=exp(tmp$par[1:2])) #
        plot(pred,dataf$incr,pch=19,ylab="Observed", xlab="Predicted",...)#, ylim=c(0,0.02))#
        abline(0,1,col=2)#
    }#
    return(gr1)#
}#
#
#
#
# Define a new growth method (classic midpoint rule approach)#
setMethod("growth", c("numeric", "numeric", "numeric", "growthObj.PowerLaw"), #
          function(size, sizeNext, cov, growthObj) { #
              mux <- size+PowerLaw(size=size, paras=growthObj@paras) #
              sigmax <- growthObj@sd #
              u <- dnorm(sizeNext, mux, sigmax, log = F) #
              return(u)#
          })#
#
#
# Define a new growth method (cumulative  approach)#
setMethod("growthCum", #
          c("numeric","numeric","numeric","growthObj.PowerLaw"),#
          function(size,sizeNext,cov,growthObj){#
              mux <- size+PowerLaw(size=size, paras=growthObj@paras) #
              sigmax <-  growthObj@sd#
              u <- pnorm(sizeNext,mux,sigmax,log=FALSE)  #
              return(u);#
          })#
#
###### HOSSFELD #######################################
#
#slightly different from one in main, since also getting variance + doing parameters on log scale#
wrapHossfeld. <- function(par, dataf) { #
    par <- exp(par)#
    pred <- Hossfeld(dataf$size, par[1:3]) #
    logLik <- dnorm(dataf$incr,pred,par[4], log=TRUE)#
    return(-sum(logLik[!is.na(dataf$incr) & !is.na(dataf$size)])) #
 } #
#
#
# Create wrapper to fit and return a Gompertz growth function#
getHossfeld <- function(dataf, par=c(0.002,0.01,1,1), plot=FALSE,...) {#
    tmp <- optim(par=log(par),wrapHossfeld., dataf=dataf, method="Nelder-Mead")  #
    gr1 <- new("growthObj.Hossfeld")#
    gr1@paras <- exp(tmp$par[1:3])#
    gr1@sd <- exp(tmp$par[4])#
    gr1@logLik <- -tmp$value#
#
    if(plot) {#
        pred <- Hossfeld(size=dataf$size,par=exp(tmp$par[1:3])) #
        plot(pred,dataf$incr,pch=19,ylab="Observed", xlab="Predicted",...)#, ylim=c(0,0.02))#
        abline(0,1,col=2)#
    }#
    return(gr1)#
}#
#
#
# Define a new growth method (cumulative  approach)#
setMethod("growthCum", #
          c("numeric","numeric","numeric","growthObj.Hossfeld"),#
          function(size,sizeNext,cov,growthObj){#
              mux <- size+Hossfeld(size=size, paras=growthObj@paras) #
              sigmax <-  growthObj@sd#
              u <- pnorm(sizeNext,mux,sigmax,log=FALSE)  #
              return(u);#
          })#
#
#
#
#
#
#### Function to fit all of these and compare likelihoods ####
###
growthModelCompMech <- function(dataf,#
                                modelList = c("getPowerLaw", "getMonomolecular","getGompertz",#
                                "getLogistic3","getLogistic4","getHossfeld"),#
                                testType = "AIC",#
                                makePlot = FALSE,#
                                plotLegend = TRUE, #
                                mainTitle = "",...) {#
#
#
    varN <- length(modelList)#
    summaryTable <- data.frame()#
    grObj <- vector("list", length = varN)#
    i <- 1#
#
    for (v in 1:varN) {#
        print(v)#
        if (modelList[v]=="getPowerLaw") {#
            parStart <- as.numeric(c(mean(dataf$incr/dataf$size,na.rm=TRUE),1,1))#
            grObj[[i]] <- getPowerLaw(dataf,par=parStart,plot=FALSE,main=mainTitle,...)#
          }#
        if (modelList[v]=="getMonomolecular") {#
            parStart <- as.numeric(c(quantile(dataf$incr,0.975,na.rm=TRUE),#
                                        quantile(dataf$size,0.975,na.rm=TRUE),1))#
            grObj[[i]] <- getMonomolecular(dataf,par=parStart,plot=FALSE,main=mainTitle,...)#
        }#
        if (modelList[v]=="getGompertz") {#
            parStart <- c(8e-4,2.5,1)#
            grObj[[i]] <- getGompertz(dataf,par=parStart,plot=FALSE,main=mainTitle,...)#
          }#
        if (modelList[v]=="getLogistic3") {#
            parStart <- c(0.2,77,1)#
            grObj[[i]] <- getLogistic3(dataf,par=parStart,plot=FALSE,main=mainTitle,...)#
        }#
        if (modelList[v]=="getLogistic4") {#
            parStart <- c(0.02,10,0.001,1)#
            grObj[[i]] <- getLogistic4(dataf,par=parStart,plot=FALSE,main=mainTitle,...)#
        }#
        if (modelList[v]=="getHossfeld") {#
            parStart <- c(0.002,0.01,1,1)#
            grObj[[i]] <- getHossfeld(dataf,par=parStart,plot=FALSE,main=mainTitle,...)#
            }         #
        if (testType =="AIC") val <- (2*length(grObj[[i]]@paras))-2*grObj[[i]]@logLik#
        if (testType =="logLik") val <- grObj[[i]]@logLik#
        summaryTable <- rbind(summaryTable, cbind(substr(modelList[v],4,nchar(modelList[v])),#
                                                  val))#
        i <- i + 1#
#
    }#
    #
    summaryTable <- as.data.frame(summaryTable)#
    names(summaryTable) <- c("Model",  testType)#
    outputList <- list(summaryTable = summaryTable, growthObjects = grObj)#
#
    if(makePlot == TRUE) {#
        y.lab <- "Growth"#
        plot(dataf$size, dataf$incr, pch = 19, xlab = "Size at t", ylab = y.lab, main = mainTitle, cex = 0.8,...)#
        sizeSorted <- unique(sort(dataf$size))#
        for(p in 1:varN) {#
      #
            if (modelList[p]=="getPowerLaw") pred <- PowerLaw(size=sizeSorted,par=grObj[[p]]@paras)#
            if (modelList[p]=="getMonomolecular")  pred <- Monomolecular(size=sizeSorted,par=grObj[[p]]@paras)#
            if (modelList[p]=="getGompertz")   pred <- Gompertz(size=sizeSorted,par=grObj[[p]]@paras)#
            if (modelList[p]=="getLogistic3")  pred <- Logistic3(size=sizeSorted,par=grObj[[p]]@paras)#
            if (modelList[p]=="getLogistic4")  pred <- Logistic4(size=sizeSorted,par=grObj[[p]]@paras)#
            if (modelList[p]=="getHossfeld")  pred <- Hossfeld(size=sizeSorted,par=grObj[[p]]@paras)#
  #
            lines(sizeSorted, pred, type = "l", col = (p + 1))#
        }#
 #
        if(plotLegend) {#
            legend("topleft", legend = sprintf("%s: %s = %.1f", modelList,#
                              testType, as.numeric(as.character(summaryTable[,2]))), col = c(2:(p + 1)), lty = 1, xjust = 1)#
        }#
    }#
#
    return(outputList)#
#
}#
#
    #print("Comparison Gompertz and Logistic 3")#
    #print(1-pchisq(-2*(m3@logLik-m4@logLik),1))#
    #print("Comparison Logistic 4 and Logistic 3")#
    #print(1-pchisq(-2*(m4@logLik-m5@logLik),1))
FigureFive()
#
## Function to add pdf#
addPdfGrowthPic <- function(sizesPlotAt=c(20,50,60),#
                            sizeRange=c(20,400),#
                            scalar=100,#
                            growthObjList,...){#
#
    nval <- length(growthObjList)#
    sizes <- seq(sizeRange[1],sizeRange[2],length=200)#
    #
    for (j in 1:nval) { #
        for (k in 1:length(sizesPlotAt)) {#
#
            points(sizes,#
                   growth(sizesPlotAt,sizes,1,growthObjLis[[j]])*scalar, type="l", ...)#
        }}#
}
FigureFive()
#
    sp.list <- c("vain", "myda", "hubr")#
    sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
    #
    dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
    dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
#
   #this is the time-adjusted#
     # 1. MECHANISTIC#
    #
    #this is the time-adjusted#
    dff$incr <- dff$sizeNext-dff$size#
#
    ylims1 <- pmax(range(dff$incr[dff$spcode==sp.list[1]],na.rm=TRUE)*c(1,2),-5)#
    ylims2 <- pmax(range(dff$incr[dff$spcode==sp.list[2]],na.rm=TRUE)*c(1,2),-5)#
    ylims3 <- pmax(range(dff$incr[dff$spcode==sp.list[3]],na.rm=TRUE)*c(1,2),-5)#
#
    res1 <- growthModelCompMech(dff[dff$spcode==sp.list[1],],makePlot=TRUE, ylim=ylims1)#
    addPdfGrowthPic(sizesPlotAt=c(20,50,60),sizeRange=c(20,400),scalar=100,growthObjList=res1$growthObjects,col=1:length(res1$growthObjects))
#
#
## Function to add pdf#
addPdfGrowthPic <- function(sizesPlotAt=c(20,50,60),#
                            sizeRange=c(20,400),#
                            scalar=100,#
                            growthObjList,...){#
#
    nval <- length(growthObjList)#
    sizes <- seq(sizeRange[1],sizeRange[2],length=200)#
    #
    for (j in 1:nval) { #
        for (k in 1:length(sizesPlotAt)) {#
#
            points(sizes,#
                   growth(sizesPlotAt,sizes,1,growthObjList[[j]])*scalar, type="l", ...)#
        }}#
}
  addPdfGrowthPic(sizesPlotAt=c(20,50,60),sizeRange=c(20,400),scalar=100,growthObjList=res1$growthObjects,col=1:length(res1$growthObjects))
#
## Function to add pdf#
addPdfGrowthPic <- function(sizesPlotAt=c(20,50,60),#
                            sizeRange=c(20,400),#
                            scalar=100,#
                            growthObjList,cols,...){#
#
    nval <- length(growthObjList)#
    sizes <- seq(sizeRange[1],sizeRange[2],length=200)#
    #
    for (j in 1:nval) { #
        for (k in 1:length(sizesPlotAt)) {#
#
            points(sizes,#
                   growth(sizesPlotAt,sizes,1,growthObjList[[j]])*scalar, type="l", col=cols[j],...)#
        }}#
}
  addPdfGrowthPic(sizesPlotAt=c(20,50,60),sizeRange=c(20,400),scalar=100,growthObjList=res1$growthObjects,cols=1:length(res1$growthObjects))
   res1 <- growthModelCompMech(dff[dff$spcode==sp.list[1],],makePlot=TRUE, ylim=ylims1)
   addPdfGrowthPic(sizesPlotAt=c(120,250,360),sizeRange=c(20,400),scalar=100,growthObjList=res1$growthObjects,col=1:length(res1$growthObjects))
#
## Function to add pdf#
addPdfGrowthPic <- function(sizesPlotAt=c(20,50,60),#
                            sizeRange=c(20,400),#
                            scalar=100,#
                            growthObjList,cols,...){#
#
    nval <- length(growthObjList)#
    sizes <- seq(sizeRange[1],sizeRange[2],length=200)#
    #
    for (j in 1:nval) { #
        for (k in 1:length(sizesPlotAt)) {#
#
            points(sizesPlotAt[k]+growth(sizesPlotAt[k],sizes,1,growthObjList[[j]])*scalar, sizes,type="l", col=cols[j],...)#
        }}#
}
   addPdfGrowthPic(sizesPlotAt=c(120,250,360),sizeRange=c(20,400),scalar=100,growthObjList=res1$growthObjects,col=1:length(res1$growthObjects))
#
#
## Function to add pdf#
addPdfGrowthPic <- function(sizesPlotAt=c(20,50,60),#
                            sizeRange=c(20,400),#
                            scalar=100,#
                            growthObjList,cols,...){#
#
    nval <- length(growthObjList)#
    sizes <- seq(sizeRange[1],sizeRange[2],length=200)#
    #
    for (j in 1:nval) { #
        for (k in 1:length(sizesPlotAt)) {#
#
            points(growth(sizesPlotAt[k],sizes,1,growthObjList[[j]])*scalar, sizes,type="l", col=cols[j],...)#
        }}#
}
   res1 <- growthModelCompMech(dff[dff$spcode==sp.list[1],],makePlot=TRUE, ylim=ylims1)
   addPdfGrowthPic(sizesPlotAt=c(120,250,360),sizeRange=c(20,400),scalar=100,growthObjList=res1$growthObjects,col=1:length(res1$growthObjects))
#
#
## Function to add pdf#
addPdfGrowthPic <- function(sizesPlotAt=c(20,50,60),#
                            sizeRange=c(20,400),#
                            scalar=100,#
                            growthObjList,cols,...){#
#
    nval <- length(growthObjList)#
    sizes <- seq(sizeRange[1],sizeRange[2],length=200)#
    #
    for (j in 1:nval) { #
        for (k in 1:length(sizesPlotAt)) {#
#
            points(growth(sizesPlotAt[k],sizes,1,growthObjList[[j]])*scalar, sizes,type="l", col=cols[j],...)#
        }}#
}
   addPdfGrowthPic(sizesPlotAt=c(120,250,360),sizeRange=c(20,400),scalar=100,growthObjList=res1$growthObjects,col=1:length(res1$growthObjects))
   addPdfGrowthPic(sizesPlotAt=c(120,250,360),sizeRange=c(20,400),scalar=1000,growthObjList=res1$growthObjects,col=1:length(res1$growthObjects))
   ## Bring in data#
    sp.list <- c("vain", "myda", "hubr")#
    sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
#
    dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
    dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
#
#
    #1. SIZE - SIZENEXT#
    ## Define ylim#
    ylims1 <- range(dff$sizeNext[dff$spcode==sp.list[1]],na.rm=TRUE)*c(1,1.5)#
    ylims2 <- range(dff$sizeNext[dff$spcode==sp.list[2]],na.rm=TRUE)*c(1,1.5)#
    ylims3 <- range(dff$sizeNext[dff$spcode==sp.list[3]],na.rm=TRUE)*c(1,1.5)#
    #
    par(mfrow=c(2,3),bty="l",family = "Helvetica")#
    res1 <- growthModelComp(dataf=dff[dff$spcode==sp.list[1],], makePlot=TRUE,mainTitle=sp.names[1], ylim=ylims1)
addPdfGrowthPic <- function(respType = "sizeNext",#
                            sizesPlotAt=c(20,50,60),#
                            sizeRange=c(20,400),#
                            incrRange-c(-10,50), #
                            scalar=100,#
                            growthObjList,cols,...){#
#
    nval <- length(growthObjList)#
    sizes <- seq(sizeRange[1],sizeRange[2],length=200)#
    incr <- seq(incrRange[1],incrRange[2],length=200)#
    #
    for (j in 1:nval) { #
        for (k in 1:length(sizesPlotAt)) {#
            if (respType=="sizeNext") points(sizesPlotAt[k]+growth(sizesPlotAt[k],sizes,1,growthObjList[[j]])*scalar,#
                sizes,type="l", col=cols[j],...)#
            if (respType=="incr") points(sizesPlotAt[k]+growth(sizesPlotAt[k],sizes-sizesPlotAt[k],1,growthObjList[[j]])*scalar,#
                incr,type="l", col=cols[j],...)#
            if (respType=="logincr") points(sizesPlotAt[k]+growth(sizesPlotAt[k],sizes-sizesPlotAt[k],1,growthObjList[[j]])*scalar,#
                sizes,type="l", col=cols[j],...)#
        }}#
}
#
## Function to add pdf#
addPdfGrowthPic <- function(respType = "sizeNext",#
                            sizesPlotAt=c(20,50,60),#
                            sizeRange=c(20,400),#
                            incrRange=c(-10,50), #
                            scalar=100,#
                            growthObjList,cols,...){#
#
    nval <- length(growthObjList)#
    sizes <- seq(sizeRange[1],sizeRange[2],length=200)#
    incr <- seq(incrRange[1],incrRange[2],length=200)#
    #
    for (j in 1:nval) { #
        for (k in 1:length(sizesPlotAt)) {#
            if (respType=="sizeNext") points(sizesPlotAt[k]+growth(sizesPlotAt[k],sizes,1,growthObjList[[j]])*scalar,#
                sizes,type="l", col=cols[j],...)#
            if (respType=="incr") points(sizesPlotAt[k]+growth(sizesPlotAt[k],sizes-sizesPlotAt[k],1,growthObjList[[j]])*scalar,#
                incr,type="l", col=cols[j],...)#
            if (respType=="logincr") points(sizesPlotAt[k]+growth(sizesPlotAt[k],sizes-sizesPlotAt[k],1,growthObjList[[j]])*scalar,#
                sizes,type="l", col=cols[j],...)#
        }}#
}
addPdfGrowthPic()
addPdfGrowthPic(growthObjList=res1[[2]],cols=1:5)
#
## Function to add pdf#
addPdfGrowthPic <- function(respType = "sizeNext",#
                            sizesPlotAt=c(20,50,60),#
                            sizeRange=c(20,400),#
                            incrRange=c(-10,50), #
                            scalar=100,#
                            growthObjList,#
                            cols=1:5,#
                            cov=1,#
                            ...){#
#
    nval <- length(growthObjList)#
    sizes <- seq(sizeRange[1],sizeRange[2],length=200)#
    incr <- seq(incrRange[1],incrRange[2],length=200)#
    #
    for (j in 1:nval) { #
        for (k in 1:length(sizesPlotAt)) {#
            if (respType=="sizeNext") points(sizesPlotAt[k]+growth(sizesPlotAt[k],sizes,cov,growthObjList[[j]])*scalar,#
                sizes,type="l", col=cols[j],...)#
            if (respType=="incr") points(sizesPlotAt[k]+growth(sizesPlotAt[k],sizesPlotAt[k]+incr,cov,growthObjList[[j]])*scalar,#
                incr,type="l", col=cols[j],...)#
            if (respType=="logincr") points(sizesPlotAt[k]+growth(sizesPlotAt[k],sizesPlotAt[k]+logincr,cov,growthObjList[[j]])*scalar,#
                sizes,type="l", col=cols[j],...)#
        }}#
}
addPdfGrowthPic(growthObjList=res1[[2]],cols=1:5)
#
#
#
## Make Figure 3 - various growth models simple, classic polynomials - that allow negative growth #
##
##
FigureThree <- function(){#
#
    ## Bring in data#
    sp.list <- c("vain", "myda", "hubr")#
    sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
#
    dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
    dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
#
#
    #1. SIZE - SIZENEXT#
    ## Define ylim#
    ylims1 <- range(dff$sizeNext[dff$spcode==sp.list[1]],na.rm=TRUE)*c(1,1.5)#
    ylims2 <- range(dff$sizeNext[dff$spcode==sp.list[2]],na.rm=TRUE)*c(1,1.5)#
    ylims3 <- range(dff$sizeNext[dff$spcode==sp.list[3]],na.rm=TRUE)*c(1,1.5)#
    #
    par(mfrow=c(2,3),bty="l",family = "Helvetica")#
    res1 <- growthModelComp(dataf=dff[dff$spcode==sp.list[1],], makePlot=TRUE,mainTitle=sp.names[1], ylim=ylims1)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(50,200,350),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=100,growthObjList=res1[[2]],cols=1:5,cov=1)#
    res2 <- growthModelComp(dataf=dff[dff$spcode==sp.list[2],], makePlot=TRUE,mainTitle=sp.names[2], ylim=ylims2)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(50,200,350),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=100,growthObjList=res1[[2]],cols=1:5,cov=1)#
    res3 <- growthModelComp(dataf=dff[dff$spcode==sp.list[3],], makePlot=TRUE,mainTitle=sp.names[3], ylim=ylims3)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(50,200,350),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=100,growthObjList=res1[[2]],cols=1:5,cov=1)#
#
    # 2. SIZE - INCR#
    #this is the time-adjusted#
    dff$incr <- dff$sizeNext-dff$size#
    ylims1 <- pmax(range(dff$incr[dff$spcode==sp.list[1]],na.rm=TRUE)*c(1,1.5),-5)#
    ylims2 <- pmax(range(dff$incr[dff$spcode==sp.list[2]],na.rm=TRUE)*c(1,1.5),-5)#
    ylims3 <- pmax(range(dff$incr[dff$spcode==sp.list[3]],na.rm=TRUE)*c(1,1.5),-5)#
#
    res1a <- growthModelComp(dataf=dff[dff$spcode==sp.list[1],], makePlot=TRUE,respType="incr", ylim=ylims1)#
    res2a <- growthModelComp(dataf=dff[dff$spcode==sp.list[2],], makePlot=TRUE,respType="incr", ylim=ylims2)#
    res3a <- growthModelComp(dataf=dff[dff$spcode==sp.list[3],], makePlot=TRUE,respType="incr", ylim=ylims3)#
#
#
}
FigureThree()
#
## Function to add pdf#
addPdfGrowthPic <- function(respType = "sizeNext",#
                            sizesPlotAt=c(20,50,60),#
                            sizeRange=c(20,400),#
                            incrRange=c(-10,50), #
                            scalar=100,#
                            growthObjList,#
                            cols=1:5,#
                            cov=1,#
                            minShow=1e-6,#
                            ...){#
#
    nval <- length(growthObjList)#
    sizes <- seq(sizeRange[1],sizeRange[2],length=200)#
    incr <- seq(incrRange[1],incrRange[2],length=200)#
    #
    for (j in 1:nval) { #
        for (k in 1:length(sizesPlotAt)) {           #
            if (respType=="sizeNext") {#
                pred <- growth(sizesPlotAt[k],sizes,cov,growthObjList[[j]])*scalar#
                pred[pred<minShow] <- NA#
                points(sizesPlotAt[k]+pred,#
                       sizes,type="l", col=cols[j],...)#
                #
            }#
            if (respType=="incr") {#
                pred <- growth(sizesPlotAt[k],sizesPlotAt[k]+incr,cov,growthObjList[[j]])*scalar#
                pred[pred<minShow] <- NA#
                points(sizesPlotAt[k]+pred,#
                      incr,type="l", col=cols[j],...)#
            }#
            if (respType=="logincr") {#
                pred <- growth(sizesPlotAt[k],sizesPlotAt[k]+logincr,cov,growthObjList[[j]])*scalar#
                pred[pred<minShow] <- NA#
                points(sizesPlotAt[k]+pred,#
                    sizes,type="l", col=cols[j],...)#
            }#
        }}#
}
#
## Function to add pdf#
addPdfGrowthPic <- function(respType = "sizeNext",#
                            sizesPlotAt=c(20,50,60),#
                            sizeRange=c(20,400),#
                            incrRange=c(-10,50), #
                            scalar=100,#
                            growthObjList,#
                            cols=1:5,#
                            cov=1,#
                            minShow=1e-6,#
                            ...){#
#
    nval <- length(growthObjList)#
    sizes <- seq(sizeRange[1],sizeRange[2],length=500)#
    incr <- seq(incrRange[1],incrRange[2],length=500)#
    #
    for (j in 1:nval) { #
        for (k in 1:length(sizesPlotAt)) {           #
            if (respType=="sizeNext") {#
                pred <- growth(sizesPlotAt[k],sizes,cov,growthObjList[[j]])*scalar#
                pred[pred<minShow] <- NA#
                points(sizesPlotAt[k]+pred,#
                       sizes,type="l", col=cols[j],...)#
                #
            }#
            if (respType=="incr") {#
                pred <- growth(sizesPlotAt[k],sizesPlotAt[k]+incr,cov,growthObjList[[j]])*scalar#
                pred[pred<minShow] <- NA#
                points(sizesPlotAt[k]+pred,#
                      incr,type="l", col=cols[j],...)#
            }#
            if (respType=="logincr") {#
                pred <- growth(sizesPlotAt[k],sizesPlotAt[k]+logincr,cov,growthObjList[[j]])*scalar#
                pred[pred<minShow] <- NA#
                points(sizesPlotAt[k]+pred,#
                    sizes,type="l", col=cols[j],...)#
            }#
        }}#
}
#
#
#
## Make Figure 3 - various growth models simple, classic polynomials - that allow negative growth #
##
##
FigureThree <- function(){#
#
    ## Bring in data#
    sp.list <- c("vain", "myda", "hubr")#
    sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
#
    dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
    dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
#
#
    #1. SIZE - SIZENEXT#
    ## Define ylim#
    ylims1 <- range(dff$sizeNext[dff$spcode==sp.list[1]],na.rm=TRUE)*c(1,1.5)#
    ylims2 <- range(dff$sizeNext[dff$spcode==sp.list[2]],na.rm=TRUE)*c(1,1.5)#
    ylims3 <- range(dff$sizeNext[dff$spcode==sp.list[3]],na.rm=TRUE)*c(1,1.5)#
    #
    par(mfrow=c(2,3),bty="l",family = "Helvetica")#
    res1 <- growthModelComp(dataf=dff[dff$spcode==sp.list[1],], makePlot=TRUE,mainTitle=sp.names[1], ylim=ylims1)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(50,200,350),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=100,growthObjList=res1[[2]],cols=1:5,cov=1)#
    res2 <- growthModelComp(dataf=dff[dff$spcode==sp.list[2],], makePlot=TRUE,mainTitle=sp.names[2], ylim=ylims2)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(50,100,200),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=100,growthObjList=res1[[2]],cols=1:5,cov=1)#
    res3 <- growthModelComp(dataf=dff[dff$spcode==sp.list[3],], makePlot=TRUE,mainTitle=sp.names[3], ylim=ylims3)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(30,50,70),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=100,growthObjList=res1[[2]],cols=1:5,cov=1)#
#
    # 2. SIZE - INCR#
    #this is the time-adjusted#
    dff$incr <- dff$sizeNext-dff$size#
    ylims1 <- pmax(range(dff$incr[dff$spcode==sp.list[1]],na.rm=TRUE)*c(1,1.5),-5)#
    ylims2 <- pmax(range(dff$incr[dff$spcode==sp.list[2]],na.rm=TRUE)*c(1,1.5),-5)#
    ylims3 <- pmax(range(dff$incr[dff$spcode==sp.list[3]],na.rm=TRUE)*c(1,1.5),-5)#
#
    res1a <- growthModelComp(dataf=dff[dff$spcode==sp.list[1],], makePlot=TRUE,respType="incr", ylim=ylims1)#
    res2a <- growthModelComp(dataf=dff[dff$spcode==sp.list[2],], makePlot=TRUE,respType="incr", ylim=ylims2)#
    res3a <- growthModelComp(dataf=dff[dff$spcode==sp.list[3],], makePlot=TRUE,respType="incr", ylim=ylims3)#
#
#
}
FigureThree()
#
## Function to add pdf#
addPdfGrowthPic <- function(respType = "sizeNext",#
                            sizesPlotAt=c(20,50,60),#
                            sizeRange=c(20,400),#
                            incrRange=c(-10,50), #
                            scalar=100,#
                            growthObjList,#
                            cols=1:5,#
                            cov=1,#
                            minShow=1e-6,#
                            ...){#
#
    nval <- length(growthObjList)#
    sizes <- seq(sizeRange[1],sizeRange[2],length=500)#
    incr <- seq(incrRange[1],incrRange[2],length=500)#
    #
    for (j in 1:nval) { #
        for (k in 1:length(sizesPlotAt)) {           #
            if (respType=="sizeNext") {#
                pred <- growth(sizesPlotAt[k],sizes,cov,growthObjList[[j]])*scalar#
                pred[pred<minShow] <- NA#
                points(sizesPlotAt[k]+pred,#
                       sizes,type="l", col=cols[j],...)                #
            }#
            if (respType=="incr") {#
                pred <- growth(sizesPlotAt[k],sizesPlotAt[k]+incr,cov,growthObjList[[j]])*scalar#
                pred[pred<minShow] <- NA#
                points(sizesPlotAt[k]+pred,#
                      incr,type="l", col=cols[j],...)#
            }#
            if (respType=="logincr") {#
                pred <- growth(sizesPlotAt[k],sizesPlotAt[k]+logincr,cov,growthObjList[[j]])*scalar#
                pred[pred<minShow] <- NA#
                points(sizesPlotAt[k]+pred,#
                    sizes,type="l", col=cols[j],...)#
            }#
        }}#
}
#
#
## Make Figure 3 - various growth models simple, classic polynomials - that allow negative growth #
##
##
FigureThree <- function(){#
#
    ## Bring in data#
    sp.list <- c("vain", "myda", "hubr")#
    sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
#
    dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
    dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
#
#
    #1. SIZE - SIZENEXT#
    ## Define ylim#
    ylims1 <- range(dff$sizeNext[dff$spcode==sp.list[1]],na.rm=TRUE)*c(1,1.5)#
    ylims2 <- range(dff$sizeNext[dff$spcode==sp.list[2]],na.rm=TRUE)*c(1,1.5)#
    ylims3 <- range(dff$sizeNext[dff$spcode==sp.list[3]],na.rm=TRUE)*c(1,1.5)#
    #
    par(mfrow=c(2,3),bty="l",family = "Helvetica")#
    res1 <- growthModelComp(dataf=dff[dff$spcode==sp.list[1],], makePlot=TRUE,mainTitle=sp.names[1], ylim=ylims1)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(50,200,350),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=100,growthObjList=res1[[2]],cols=1:5,cov=1)#
    res2 <- growthModelComp(dataf=dff[dff$spcode==sp.list[2],], makePlot=TRUE,mainTitle=sp.names[2], ylim=ylims2)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(50,100,150),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=100,growthObjList=res1[[2]],cols=1:5,cov=1)#
    res3 <- growthModelComp(dataf=dff[dff$spcode==sp.list[3],], makePlot=TRUE,mainTitle=sp.names[3], ylim=ylims3)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(30,45,60),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=30,growthObjList=res1[[2]],cols=1:5,cov=1)#
#
    # 2. SIZE - INCR#
    #this is the time-adjusted#
    dff$incr <- dff$sizeNext-dff$size#
    ylims1 <- pmax(range(dff$incr[dff$spcode==sp.list[1]],na.rm=TRUE)*c(1,1.5),-5)#
    ylims2 <- pmax(range(dff$incr[dff$spcode==sp.list[2]],na.rm=TRUE)*c(1,1.5),-5)#
    ylims3 <- pmax(range(dff$incr[dff$spcode==sp.list[3]],na.rm=TRUE)*c(1,1.5),-5)#
#
    res1a <- growthModelComp(dataf=dff[dff$spcode==sp.list[1],], makePlot=TRUE,respType="incr", ylim=ylims1)#
    res2a <- growthModelComp(dataf=dff[dff$spcode==sp.list[2],], makePlot=TRUE,respType="incr", ylim=ylims2)#
    res3a <- growthModelComp(dataf=dff[dff$spcode==sp.list[3],], makePlot=TRUE,respType="incr", ylim=ylims3)#
#
#
}
FigureThree()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
FigureThree()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
FigureThree()
res[[1]]
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
res[[1]]
FigureThree()
#
## Function to add pdf#
addPdfGrowthPic <- function(respType = "sizeNext",#
                            sizesPlotAt=c(20,50,60),#
                            sizeRange=c(20,400),#
                            incrRange=c(-10,50), #
                            scalar=100,#
                            growthObjList,#
                            cols=2:5,#
                            cov=1,#
                            minShow=1e-2,#
                            jitt=2,  #how far apart should pdfs be if you are plotting several#
                            ...){#
#
    nval <- length(growthObjList)#
    sizes <- seq(sizeRange[1],sizeRange[2],length=500)#
    incr <- seq(incrRange[1],incrRange[2],length=500)#
    #
    for (j in 1:nval) { #
        for (k in 1:length(sizesPlotAt)) {           #
            if (respType=="sizeNext") {#
                pred <- growth(sizesPlotAt[k],sizes,cov,growthObjList[[j]])*scalar#
                pred[pred<minShow] <- NA#
                points(sizesPlotAt[k]+pred+jitt*(j-1),#
                       sizes,type="l", col=cols[j],...)                #
            }#
            if (respType=="incr") {#
                pred <- growth(sizesPlotAt[k],sizesPlotAt[k]+incr,cov,growthObjList[[j]])*scalar#
                pred[pred<minShow] <- NA#
                points(sizesPlotAt[k]+pred+jitt*(j-1),#
                      incr,type="l", col=cols[j],...)#
            }#
            if (respType=="logincr") {#
                pred <- growth(sizesPlotAt[k],sizesPlotAt[k]+logincr,cov,growthObjList[[j]])*scalar#
                pred[pred<minShow] <- NA#
                points(sizesPlotAt[k]+pred+jitt*(j-1),#
                    sizes,type="l", col=cols[j],...)#
            }#
        }}#
}
FigureThree()
warnings()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
FigureThree()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")\
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
FigureThree()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
FigureThree()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
FigureThree()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
FigureThree()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
FigureThree()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
FigureThree()
#
#
## Make Figure 3 - various growth models simple, classic polynomials - that allow negative growth #
##
##
FigureThree <- function(){#
#
    ## Bring in data#
    sp.list <- c("vain", "myda", "hubr")#
    sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
#
    dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
    dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
#
#
    #1. SIZE - SIZENEXT#
    ## Define ylim#
    ylims1 <- range(dff$sizeNext[dff$spcode==sp.list[1]],na.rm=TRUE)*c(1,1.5)#
    ylims2 <- range(dff$sizeNext[dff$spcode==sp.list[2]],na.rm=TRUE)*c(1,1.5)#
    ylims3 <- range(dff$sizeNext[dff$spcode==sp.list[3]],na.rm=TRUE)*c(1,1.5)#
    #
    par(mfrow=c(2,3),bty="l",family = "Helvetica")#
    res1 <- growthModelComp(dataf=dff[dff$spcode==sp.list[1],], expVars = c("size", "size + size2"),#
                            makePlot=TRUE,mainTitle=sp.names[1], ylim=ylims1)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(50,200,350),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=100,growthObjList=res1[[2]],cols=2:5,cov=1)#
    res2 <- growthModelComp(dataf=dff[dff$spcode==sp.list[2],], expVars = c("size", "size + size2"),makePlot=TRUE,mainTitle=sp.names[2], ylim=ylims2)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(50,100,150),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=100,growthObjList=res1[[2]],cols=2:5,cov=1)#
    res3 <- growthModelComp(dataf=dff[dff$spcode==sp.list[3],], expVars = c("size", "size + size2"),makePlot=TRUE,mainTitle=sp.names[3], ylim=ylims3)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(30,45,60),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=30,growthObjList=res1[[2]],cols=2:5,cov=1)#
#
    # 2. SIZE - INCR#
    #this is the time-adjusted#
    dff$incr <- dff$sizeNext-dff$size#
    ylims1 <- pmax(range(dff$incr[dff$spcode==sp.list[1]],na.rm=TRUE)*c(1,1.5),-5)#
    ylims2 <- pmax(range(dff$incr[dff$spcode==sp.list[2]],na.rm=TRUE)*c(1,1.5),-5)#
    ylims3 <- pmax(range(dff$incr[dff$spcode==sp.list[3]],na.rm=TRUE)*c(1,1.5),-5)#
#
    res1a <- growthModelComp(dataf=dff[dff$spcode==sp.list[1],], makePlot=TRUE,respType="incr", ylim=ylims1)#
    addPdfGrowthPic(respType = "incr",sizesPlotAt=c(50,200,350),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=200,growthObjList=res1[[2]],cols=2:5,cov=1,minShow=0.5,lty=1)#
    res2a <- growthModelComp(dataf=dff[dff$spcode==sp.list[2],], makePlot=TRUE,respType="incr", ylim=ylims2)#
    addPdfGrowthPic(respType = "incr",sizesPlotAt=c(50,100,150),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=200,growthObjList=res1[[2]],cols=2:5,cov=1,minShow=0.5,lty=1)#
    res3a <- growthModelComp(dataf=dff[dff$spcode==sp.list[3],], makePlot=TRUE,respType="incr", ylim=ylims3)#
    addPdfGrowthPic(respType = "incr",sizesPlotAt=c(30,45,60),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=100,growthObjList=res1[[2]],cols=2:5,cov=1,minShow=0.5,lty=1)#
#
#
    return(list(res1=res1,res1a=res1a))#
    #
}
ax<-FigureThree()
ax[[2]]
length(ax[[2]])
length(ax[[2]][[2]])
#
#
## Make Figure 3 - various growth models simple, classic polynomials - that allow negative growth #
##
##
FigureThree <- function(){#
#
    ## Bring in data#
    sp.list <- c("vain", "myda", "hubr")#
    sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
#
    dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
    dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
#
#
    #1. SIZE - SIZENEXT#
    ## Define ylim#
    ylims1 <- range(dff$sizeNext[dff$spcode==sp.list[1]],na.rm=TRUE)*c(1,1.5)#
    ylims2 <- range(dff$sizeNext[dff$spcode==sp.list[2]],na.rm=TRUE)*c(1,1.5)#
    ylims3 <- range(dff$sizeNext[dff$spcode==sp.list[3]],na.rm=TRUE)*c(1,1.5)#
    #
    par(mfrow=c(2,3),bty="l",family = "Helvetica")#
    res1 <- growthModelComp(dataf=dff[dff$spcode==sp.list[1],], expVars = c("size", "size + size2"),#
                            makePlot=TRUE,mainTitle=sp.names[1], ylim=ylims1)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(50,200,350),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=100,growthObjList=res1[[2]],cols=2:5,cov=1)#
    res2 <- growthModelComp(dataf=dff[dff$spcode==sp.list[2],], expVars = c("size", "size + size2"),makePlot=TRUE,mainTitle=sp.names[2], ylim=ylims2)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(50,100,150),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=100,growthObjList=res1[[2]],cols=2:5,cov=1)#
    res3 <- growthModelComp(dataf=dff[dff$spcode==sp.list[3],], expVars = c("size", "size + size2"),makePlot=TRUE,mainTitle=sp.names[3], ylim=ylims3)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(30,45,60),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=30,growthObjList=res1[[2]],cols=2:5,cov=1)#
#
    # 2. SIZE - INCR#
    #this is the time-adjusted#
    dff$incr <- dff$sizeNext-dff$size#
    ylims1 <- pmax(range(dff$incr[dff$spcode==sp.list[1]],na.rm=TRUE)*c(1,1.5),-5)#
    ylims2 <- pmax(range(dff$incr[dff$spcode==sp.list[2]],na.rm=TRUE)*c(1,1.5),-5)#
    ylims3 <- pmax(range(dff$incr[dff$spcode==sp.list[3]],na.rm=TRUE)*c(1,1.5),-5)#
#
    res1a <- growthModelComp(dataf=dff[dff$spcode==sp.list[1],], makePlot=TRUE,respType="incr", ylim=ylims1)#
    addPdfGrowthPic(respType = "incr",sizesPlotAt=c(50,200,350),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=200,growthObjList=res1[[2]],cols=2:5,cov=1,minShow=0.5,lty=1)#
    res2a <- growthModelComp(dataf=dff[dff$spcode==sp.list[2],], makePlot=TRUE,respType="incr", ylim=ylims2)#
    addPdfGrowthPic(respType = "incr",sizesPlotAt=c(50,100,150),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=200,growthObjList=res1[[2]],cols=2:5,cov=1,minShow=0.5,lty=1)#
    res3a <- growthModelComp(dataf=dff[dff$spcode==sp.list[3],], makePlot=TRUE,respType="incr", ylim=ylims3)#
    addPdfGrowthPic(respType = "incr",sizesPlotAt=c(30,45,60),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=100,growthObjList=res1[[2]],cols=2:5,cov=1,minShow=0.5,lty=1)#
#
#
    return(list(res1=res1,res1a=res1a))#
    #
}
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
ax<-FigureThree()
length(ax[[2]])
length(ax[[2]][[2]])
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
ax<-FigureThree()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
ax<-FigureThree()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
ax<-FigureThree()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
ax<-FigureThree()
#
#
## Make Figure 3 - various growth models simple, classic polynomials - that allow negative growth #
##
##
FigureThree <- function(){#
#
    ## Bring in data#
    sp.list <- c("vain", "myda", "hubr")#
    sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
#
    dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
    dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
#
#
    #1. SIZE - SIZENEXT#
    ## Define ylim#
    ylims1 <- range(dff$sizeNext[dff$spcode==sp.list[1]],na.rm=TRUE)*c(1,1.5)#
    ylims2 <- range(dff$sizeNext[dff$spcode==sp.list[2]],na.rm=TRUE)*c(1,1.5)#
    ylims3 <- range(dff$sizeNext[dff$spcode==sp.list[3]],na.rm=TRUE)*c(1,1.5)#
    #
    par(mfrow=c(2,3),bty="l",family = "Helvetica")#
    res1 <- growthModelComp(dataf=dff[dff$spcode==sp.list[1],], expVars = c("size", "size + size2"),#
                            makePlot=TRUE,mainTitle=sp.names[1], ylim=ylims1)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(50,200,350),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=100,growthObjList=res1[[2]],cols=2:5,cov=1)#
    res2 <- growthModelComp(dataf=dff[dff$spcode==sp.list[2],], expVars = c("size", "size + size2"),makePlot=TRUE,mainTitle=sp.names[2], ylim=ylims2)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(50,100,150),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=100,growthObjList=res2[[2]],cols=2:5,cov=1)#
    res3 <- growthModelComp(dataf=dff[dff$spcode==sp.list[3],], expVars = c("size", "size + size2"),makePlot=TRUE,mainTitle=sp.names[3], ylim=ylims3)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(30,45,60),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=30,growthObjList=res3[[2]],cols=2:5,cov=1)#
#
    # 2. SIZE - INCR#
    #this is the time-adjusted#
    dff$incr <- dff$sizeNext-dff$size#
    ylims1 <- pmax(range(dff$incr[dff$spcode==sp.list[1]],na.rm=TRUE)*c(1,1.5),-5)#
    ylims2 <- pmax(range(dff$incr[dff$spcode==sp.list[2]],na.rm=TRUE)*c(1,1.5),-5)#
    ylims3 <- pmax(range(dff$incr[dff$spcode==sp.list[3]],na.rm=TRUE)*c(1,1.5),-5)#
#
    res1a <- growthModelComp(dataf=dff[dff$spcode==sp.list[1],], makePlot=TRUE,respType="incr", ylim=ylims1)#
    addPdfGrowthPic(respType = "incr",sizesPlotAt=c(50,200,350),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=250,growthObjList=res1a[[2]],cols=2:5,cov=1,minShow=0.05,lty=1)#
    res2a <- growthModelComp(dataf=dff[dff$spcode==sp.list[2],], makePlot=TRUE,respType="incr", ylim=ylims2)#
    addPdfGrowthPic(respType = "incr",sizesPlotAt=c(50,100,150),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=250,growthObjList=res2a[[2]],cols=2:5,cov=1,minShow=0.01,lty=1)#
    res3a <- growthModelComp(dataf=dff[dff$spcode==sp.list[3],], makePlot=TRUE,respType="incr", ylim=ylims3)#
    addPdfGrowthPic(respType = "incr",sizesPlotAt=c(20,40,55),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=20,growthObjList=res3a[[2]],cols=2:5,cov=1,minShow=0.05,lty=1)#
#
#
    return(list(res1=res1,res1a=res1a))#
    #
}
ax<-FigureThree()
#
## Make Figure 3 - various growth models simple, classic polynomials - that allow negative growth #
##
##
FigureThree <- function(){#
#
    ## Bring in data#
    sp.list <- c("vain", "myda", "hubr")#
    sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
#
    dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
    dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
#
#
    #1. SIZE - SIZENEXT#
    ## Define ylim#
    ylims1 <- range(dff$sizeNext[dff$spcode==sp.list[1]],na.rm=TRUE)*c(1,1.5)#
    ylims2 <- range(dff$sizeNext[dff$spcode==sp.list[2]],na.rm=TRUE)*c(1,1.5)#
    ylims3 <- range(dff$sizeNext[dff$spcode==sp.list[3]],na.rm=TRUE)*c(1,1.5)#
    #
    par(mfrow=c(2,3),bty="l",family = "Helvetica")#
    res1 <- growthModelComp(dataf=dff[dff$spcode==sp.list[1],], expVars = c("size", "size + size2"),#
                            makePlot=TRUE,mainTitle=sp.names[1], ylim=ylims1)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(50,200,350),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=200,growthObjList=res1[[2]],cols=2:5,cov=1)#
    res2 <- growthModelComp(dataf=dff[dff$spcode==sp.list[2],], expVars = c("size", "size + size2"),makePlot=TRUE,mainTitle=sp.names[2], ylim=ylims2)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(50,100,150),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=100,growthObjList=res2[[2]],cols=2:5,cov=1)#
    res3 <- growthModelComp(dataf=dff[dff$spcode==sp.list[3],], expVars = c("size", "size + size2"),makePlot=TRUE,mainTitle=sp.names[3], ylim=ylims3)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(30,45,60),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=30,growthObjList=res3[[2]],cols=2:5,cov=1)#
#
    # 2. SIZE - INCR#
    #this is the time-adjusted#
    dff$incr <- dff$sizeNext-dff$size#
    ylims1 <- pmax(range(dff$incr[dff$spcode==sp.list[1]],na.rm=TRUE)*c(1,1.5),-5)#
    ylims2 <- pmax(range(dff$incr[dff$spcode==sp.list[2]],na.rm=TRUE)*c(1,1.5),-5)#
    ylims3 <- pmax(range(dff$incr[dff$spcode==sp.list[3]],na.rm=TRUE)*c(1,1.5),-5)#
#
    res1a <- growthModelComp(dataf=dff[dff$spcode==sp.list[1],], makePlot=TRUE,respType="incr", ylim=ylims1)#
    addPdfGrowthPic(respType = "incr",sizesPlotAt=c(50,200,350),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=250,growthObjList=res1a[[2]],cols=2:5,cov=1,minShow=0.05,lty=1)#
    res2a <- growthModelComp(dataf=dff[dff$spcode==sp.list[2],], makePlot=TRUE,respType="incr", ylim=ylims2)#
    addPdfGrowthPic(respType = "incr",sizesPlotAt=c(50,100,150),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=250,growthObjList=res2a[[2]],cols=2:5,cov=1,minShow=0.1,lty=1)#
    res3a <- growthModelComp(dataf=dff[dff$spcode==sp.list[3],], makePlot=TRUE,respType="incr", ylim=ylims3)#
    addPdfGrowthPic(respType = "incr",sizesPlotAt=c(20,40,55),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=20,growthObjList=res3a[[2]],cols=2:5,cov=1,minShow=0.05,lty=1)#
#
#
    return(list(res1=res1,res1a=res1a))#
    #
}
ax<-FigureThree()
#
## Make Figure 3 - various growth models simple, classic polynomials - that allow negative growth #
##
##
FigureThree <- function(){#
#
    ## Bring in data#
    sp.list <- c("vain", "myda", "hubr")#
    sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
#
    dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
    dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
#
#
    #1. SIZE - SIZENEXT#
    ## Define ylim#
    ylims1 <- range(dff$sizeNext[dff$spcode==sp.list[1]],na.rm=TRUE)*c(1,1.5)#
    ylims2 <- range(dff$sizeNext[dff$spcode==sp.list[2]],na.rm=TRUE)*c(1,1.5)#
    ylims3 <- range(dff$sizeNext[dff$spcode==sp.list[3]],na.rm=TRUE)*c(1,1.5)#
    #
    par(mfrow=c(2,3),bty="l",family = "Helvetica")#
    res1 <- growthModelComp(dataf=dff[dff$spcode==sp.list[1],], expVars = c("size", "size + size2"),#
                            makePlot=TRUE,mainTitle=sp.names[1], ylim=ylims1)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(50,200,350),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=200,growthObjList=res1[[2]],cols=2:5,cov=1)#
    res2 <- growthModelComp(dataf=dff[dff$spcode==sp.list[2],], expVars = c("size", "size + size2"),makePlot=TRUE,mainTitle=sp.names[2], ylim=ylims2)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(50,100,150),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=100,growthObjList=res2[[2]],cols=2:5,cov=1)#
    res3 <- growthModelComp(dataf=dff[dff$spcode==sp.list[3],], expVars = c("size", "size + size2"),makePlot=TRUE,mainTitle=sp.names[3], ylim=ylims3)#
    addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(30,45,60),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=30,growthObjList=res3[[2]],cols=2:5,cov=1)#
#
    # 2. SIZE - INCR#
    #this is the time-adjusted#
    dff$incr <- dff$sizeNext-dff$size#
    ylims1 <- pmax(range(dff$incr[dff$spcode==sp.list[1]],na.rm=TRUE)*c(1,1.5),-5)#
    ylims2 <- pmax(range(dff$incr[dff$spcode==sp.list[2]],na.rm=TRUE)*c(1,1.5),-5)#
    ylims3 <- pmax(range(dff$incr[dff$spcode==sp.list[3]],na.rm=TRUE)*c(1,1.5),-5)#
#
    res1a <- growthModelComp(dataf=dff[dff$spcode==sp.list[1],], makePlot=TRUE,respType="incr", ylim=ylims1)#
    addPdfGrowthPic(respType = "incr",sizesPlotAt=c(50,200,350),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=250,growthObjList=res1a[[2]],cols=2:5,cov=1,minShow=0.05,lty=1)#
    res2a <- growthModelComp(dataf=dff[dff$spcode==sp.list[2],], makePlot=TRUE,respType="incr", ylim=ylims2)#
    addPdfGrowthPic(respType = "incr",sizesPlotAt=c(50,100,150),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=250,growthObjList=res2a[[2]],cols=2:5,cov=1,minShow=0.1,lty=1)#
    res3a <- growthModelComp(dataf=dff[dff$spcode==sp.list[3],], makePlot=TRUE,respType="incr", ylim=ylims3)#
    addPdfGrowthPic(respType = "incr",sizesPlotAt=c(20,40,55),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=20,growthObjList=res3a[[2]],cols=2:5,cov=1,minShow=0.05,lty=1)#
#
#
    return(list(res1=res1,res1a=res1a))#
    #
}
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
ax<-FigureThree()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
ax<-FigureFour()
#
    ## Bring in data#
    sp.list <- c("vain", "myda", "hubr")#
    sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
#
    dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
     dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
#
 #
    # 1. LOGINCR#
    #
    #this is the time-adjusted#
    par(mfrow=c(2,3),bty="l",family = "Helvetica")#
    dff$logincr <- log(dff$sizeNext-dff$size)#
    dff$logincr[!is.finite(dff$logincr)] <- NA#
    ylims1 <-c(-10,10)#
    ylims2 <-c(-10,10)#
    ylims3 <- c(-10,10)#
    #
    res1 <- growthModelComp(dataf=dff[dff$spcode==sp.list[1],], makePlot=TRUE,respType="logincr", ylim=ylims1)#
    addPdfGrowthPic(respType = "logincr",sizesPlotAt=c(50,200,350),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=250,growthObjList=res1[[2]],cols=2:5,cov=1,minShow=0.05,lty=1)
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
#
    ## Bring in data#
    sp.list <- c("vain", "myda", "hubr")#
    sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
#
    dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
     dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
#
 #
    # 1. LOGINCR#
    #
    #this is the time-adjusted#
    par(mfrow=c(2,3),bty="l",family = "Helvetica")#
    dff$logincr <- log(dff$sizeNext-dff$size)#
    dff$logincr[!is.finite(dff$logincr)] <- NA#
    ylims1 <-c(-10,10)#
    ylims2 <-c(-10,10)#
    ylims3 <- c(-10,10)#
    #
    res1 <- growthModelComp(dataf=dff[dff$spcode==sp.list[1],], makePlot=TRUE,respType="logincr", ylim=ylims1)#
    addPdfGrowthPic(respType = "logincr",sizesPlotAt=c(50,200,350),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=250,growthObjList=res1[[2]],cols=2:5,cov=1,minShow=0.05,lty=1)
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
#
    ## Bring in data#
    sp.list <- c("vain", "myda", "hubr")#
    sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
#
    dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
     dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
#
 #
    # 1. LOGINCR#
    #
    #this is the time-adjusted#
    par(mfrow=c(2,3),bty="l",family = "Helvetica")#
    dff$logincr <- log(dff$sizeNext-dff$size)#
    dff$logincr[!is.finite(dff$logincr)] <- NA#
    ylims1 <-c(-10,10)#
    ylims2 <-c(-10,10)#
    ylims3 <- c(-10,10)#
    #
    res1 <- growthModelComp(dataf=dff[dff$spcode==sp.list[1],], makePlot=TRUE,respType="logincr", ylim=ylims1)#
    addPdfGrowthPic(respType = "logincr",sizesPlotAt=c(50,200,350),sizeRange=c(20,400),incrRange=c(-10,50),#
                    scalar=250,growthObjList=res1[[2]],cols=2:5,cov=1,minShow=0.05,lty=1)
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
FigureFour()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
FigureFour()
FigureFive()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
FigureFive()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
FigureFive()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
FigureOne()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
FigureOne()
FigureTwo()
FigureThree()
FigureThree()
FigureFour()
FigureFive()
#
##note that there are very few species for which sufficient#
## mortality data is actually available! most just don't die...#
##
# vain, myda, hubr#
##
##
compareTmatrices <- function(dataf,#
                             growthObjList,#
                             survObjList,#
                             nBigMatrix=300,#
                             chosenSize=1500,#
                             makePlot=TRUE,makeLegend=FALSE,...){ #
    #
    #STORAGE#
    LE <- LE1 <- ptime <- ptime1 <- array(dim=c(length(survObjList),length(growthObjList),nBigMatrix))#
      #
    ## LOOP OVER all possible combos#
    for (j in 1:length(survObjList)){#
            for (k in 1:length(growthObjList)){#
             #
                sv1 <- survObjList[[j]]#
                gr1 <- growthObjList[[k]]#
                              #
                #BUILD Tmatrix#
                Tmatrix <- create.IPM.Tmatrix(nBigMatrix = nBigMatrix,#
                                              minSize = 0.9*min(dataf$size,na.rm=TRUE),#
                                              maxSize = 1.1*max(dataf$size,na.rm=TRUE),#
                                              growObj = gr1, survObj = sv1, correction="constant")#
                Tmatrix1 <- create.IPM.Tmatrix(nBigMatrix = nBigMatrix,#
                                               minSize = 0.9*min(dataf$size,na.rm=TRUE),#
                                               maxSize = 1.1*max(dataf$size,na.rm=TRUE),#
                                               growObj = gr1, survObj = sv1,integrate.type="cumul",#
                                               correction="constant")#
        #
                # Get the mean life expect from every size value in IPM#
                LE[j,k,] <- MeanLifeExpect(Tmatrix)#
                ptime[j,k,] <- PassageTime(chosen.size=chosenSize,Tmatrix); #print(ptime)#
                LE1[j,k,] <- MeanLifeExpect(Tmatrix1)#
                ptime1[j,k,] <- PassageTime(chosen.size=chosenSize,Tmatrix1); #print(ptime)#
#
    #
            }}#
#
    ## PLOT#
    if (makePlot) { #
#
        nyr <- 4#
        j<-k<-1#
        plot(Tmatrix@meshpoints,LE[j,k,]*nyr,type="l",xlab="size", ylab="life expectancy",#
             ylim=pmax(range(c(LE*nyr,LE1*nyr),na.rm=TRUE),1),...)#
#
        for (j in 1:length(survObjList)){#
            for (k in 1:length(growthObjList)){#
                points(Tmatrix@meshpoints,LE[j,k,]*nyr,type="l",col=k)#
                points(Tmatrix1@meshpoints,LE1[j,k,]*nyr,type="l",col=k, lty=3)#
#
            }}#
#
      #  if (makeLegend) { legend("bottomleft", legend=c("Power Law", "Monomolecular",#
       #                                       "Gompertz", "Logistic 3 par", "Logistic 4 par"),#
        #                        lty=1, col=1:5, bty="n", cex=0.8)}#
                         #
        #
        j<-k<-1#
        plot(Tmatrix@meshpoints,ptime[j,k,]*nyr,type="l",xlab="size", ylab="passage time",#
             ylim=pmax(range(c(ptime*nyr,ptime1*nyr),na.rm=TRUE),1),...)#
        for (j in 1:length(survObjList)){#
            for (k in 1:length(growthObjList)){#
                points(Tmatrix@meshpoints,ptime[j,k,]*nyr,type="l",col=k)#
                points(Tmatrix1@meshpoints,ptime1[j,k,]*nyr,type="l",col=k,lty=3)#
#
            }}#
#
  #
    }#
            #
    #
   return(list(LE=LE,LE1=LE1,ptime=ptime,ptime1=ptime1, sizes=Tmatrix@meshpoints))#
    #
}
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
#
    sp.list <- c("vain", "myda", "hubr")#
    sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
#
    #get data#
    dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
    dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
    dff$incr <- dff$sizenext - dff$size#
#
    survModels <- Figure2()#
    growModelsNeg <- Figure3()#
    growModelsNoNeg <- Figure4()#
    growModelsMech <- Figure5()
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
#
    sp.list <- c("vain", "myda", "hubr")#
    sp.names <- c("Vateria indica", "Myristica dactyloides", "Humboldtia brunonis")#
#
    #get data#
    dff <- getData(filename="/Users/cjessicametcalf/Documents/IPM/data/",#
                   species="all")#
    dff <- dff[dff$spcode==sp.list[1] | dff$spcode==sp.list[2] | dff$spcode==sp.list[3],]#
    dff$incr <- dff$sizeNext - dff$size#
#
    survModels <- FigureTwo()#
    growModelsNeg <- FigureThree()#
    growModelsNoNeg <- FigureFour()#
    growModelsMech <- FigureFive()
survModels
names(survModels)
names(survModels$res1)
growModelsNeg$growModels
growModelsNeg
names(growModelsNeg)
names(growModelsNeg$res1)
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
   #picture    #
    par(mfrow=c(2,2),bty="l")#
    a1 <- compareTmatrices(dataf=dff[dff$spcode==sp.list[1],],log="y",#
                           growthObjList=list(growModelsNeg$res1$growthObjects,growModelsNoNeg$res1$growthObjects,growModelsMech$res1$growthObject),#
                           survObjList=list(survModels$res1$survObjects[2]),#
                           nBigMatrix=300,chosen.size=1500,makePlot=TRUE,#
                           makeLegend=TRUE, legendNames=c("sizeNext","incr","logincr","truncincr","Power","Monomolecular","Gompertz","Logistic3","Logistic4","Hossfeld"))#
    mtext(sp.list[1],side=3)
    grlist <- growModelsNeg$res1$growthObjects;#
    for (j in 1:length(growModelsNoNeg$res1$growthObjects)) grlist[[length(growModelsNeg$res1$growthObjects)+1]] <- growModelsNoNeg$res1$growthObjects[[j]]
grlist
    grlist <- c(growModelsNeg$res1$growthObjects, growModelsNoNeg$res1$growthObjects,growModelsMech$res1$growthObject)
grlist
#
    #picture#
    grlist <- c(growModelsNeg$res1$growthObjects, growModelsNoNeg$res1$growthObjects,growModelsMech$res1$growthObject)#
#
    par(mfrow=c(2,2),bty="l")#
    a1 <- compareTmatrices(dataf=dff[dff$spcode==sp.list[1],],log="y",#
                           growthObjList=grlist,#
                           survObjList=list(survModels$res1$survObjects[2]),#
                           nBigMatrix=300,chosen.size=1500,makePlot=TRUE,#
                           makeLegend=TRUE, legendNames=c("sizeNext","incr","logincr","truncincr","Power","Monomolecular","Gompertz","Logistic3","Logistic4","Hossfeld"))
survModels$res1$survObjects
#
    par(mfrow=c(2,2),bty="l")#
    a1 <- compareTmatrices(dataf=dff[dff$spcode==sp.list[1],],log="y",#
                           growthObjList=grlist,#
                           survObjList=list(survModels$res1$survObjects[[2]]),#
                           nBigMatrix=300,chosen.size=1500,makePlot=TRUE,#
                           makeLegend=TRUE, legendNames=c("sizeNext","incr","logincr","truncincr","Power","Monomolecular","Gompertz","Logistic3","Logistic4","Hossfeld"))
           #BUILD Tmatrix#
                Tmatrix <- create.IPM.Tmatrix(nBigMatrix = nBigMatrix,#
                                              minSize = 0.9*min(dataf$size,na.rm=TRUE),#
                                              maxSize = 1.1*max(dataf$size,na.rm=TRUE),#
                                              growObj = gr1, survObj = sv1, correction="constant",integrateType="midpoint")#
                Tmatrix1 <- create.IPM.Tmatrix(nBigMatrix = nBigMatrix,
MeanLifeExpect}
MeanLifeExpect
source("/Users/cjessicametcalf/Documents/IPM/source/TreesIndia-Util.R")
#
    par(mfrow=c(2,2),bty="l")#
    a1 <- compareTmatrices(dataf=dff[dff$spcode==sp.list[1],],log="y",#
                           growthObjList=grlist,#
                           survObjList=list(survModels$res1$survObjects[[2]]),#
                           nBigMatrix=300,chosen.size=1500,makePlot=TRUE,#
                           makeLegend=TRUE, legendNames=c("sizeNext","incr","logincr","truncincr","Power","Monomolecular","Gompertz","Logistic3","Logistic4","Hossfeld"))
Hossfeld
length(grlist)
   par(mfrow=c(2,2),bty="l")#
    a1 <- compareTmatrices(dataf=dff[dff$spcode==sp.list[1],],log="y",#
                           growthObjList=grlist[1:10],#
                           survObjList=list(survModels$res1$survObjects[[2]]),#
                           nBigMatrix=300,chosen.size=1500,makePlot=TRUE,#
                           makeLegend=TRUE,#
                           legendNames=c("sizeNext","incr","logincr","truncincr","Power","Monomolecular","Gompertz","Logistic3","Logistic4","Hossfeld"))#
    mtext(sp.list[1],side=3)
#
    #picture#
  #
    par(mfrow=c(3,2),bty="l")#
#
    #species 1#
    grlist <- c(growModelsNeg$res1$growthObjects, growModelsNoNeg$res1$growthObjects,growModelsMech$res1$growthObject)#
    a1 <- compareTmatrices(dataf=dff[dff$spcode==sp.list[1],],log="y",#
                           growthObjList=grlist[1:10],#
                           survObjList=list(survModels$res1$survObjects[[3]]),#
                           nBigMatrix=300,chosenSize=1500,makePlot=TRUE,#
                           makeLegend=TRUE,#
                           legendNames=c("sizeNext","incr","logincr","truncincr","Power","Monomolecular","Gompertz","Logistic3","Logistic4","Hossfeld"))#
    mtext(sp.names[1],side=3)#
#
    #species 2#
    grlist <- c(growModelsNeg$res2$growthObjects, growModelsNoNeg$res2$growthObjects,growModelsMech$res2$growthObject)#
    a2 <- compareTmatrices(dataf=dff[dff$spcode==sp.list[2],],log="y",#
                           growthObjList=grlist[1:10],#
                           survObjList=list(survModels$res2$survObjects[[2]]),#
                           nBigMatrix=300,chosenSize=1500,makePlot=TRUE,#
                           makeLegend=TRUE,#
                           legendNames=c("sizeNext","incr","logincr","truncincr","Power","Monomolecular","Gompertz","Logistic3","Logistic4","Hossfeld"))#
    mtext(sp.names[2],side=3)#
#
#
    #species 3#
    grlist <- c(growModelsNeg$res3$growthObjects, growModelsNoNeg$res3$growthObjects,growModelsMech$res3$growthObject)#
    a3 <- compareTmatrices(dataf=dff[dff$spcode==sp.list[3],],log="y",#
                           growthObjList=grlist[1:10],#
                           survObjList=list(survModels$res3$survObjects[[2]]),#
                           nBigMatrix=300,chosenSize=1500,makePlot=TRUE,#
                           makeLegend=TRUE,#
                           legendNames=c("sizeNext","incr","logincr","truncincr","Power","Monomolecular","Gompertz","Logistic3","Logistic4","Hossfeld"))#
    mtext(sp.names[3],side=3)
dff <- generateData()#
#
a1 <- growthModelComp(dff, makePlot = TRUE)
addPdfGrowthPic(respType = "sizeNext")
names(a1)
addPdfGrowthPic(respType = "sizeNext",growthObjList=a1$growthObjects)
addPdfGrowthPic(respType = "sizeNext",growthObjList=a1$growthObjects,scalar=10,chosenSize=2)
a1 <- growthModelComp(dff, makePlot = TRUE)#
addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(2,3,4),#
                            sizeRange=c(-5,25),growthObjList=a1$growthObjects)
addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(2,3,4),scalar=1,#
                            sizeRange=c(-5,25),growthObjList=a1$growthObjects,cols=2:5)
a1 <- growthModelComp(dff, makePlot = TRUE)
addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(2,3,4),scalar=1,#
                            sizeRange=c(-5,25),growthObjList=a1$growthObjects,cols=2:5)
#
a1 <- growthModelComp(dff, makePlot = TRUE)#
addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(2,3,4),scalar=1,jitt=0.1,#
                            sizeRange=c(-5,25),growthObjList=a1$growthObjects,cols=2:5)
a1 <- growthModelComp(dff, makePlot = TRUE)#
addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(2,6,10),scalar=1,jitt=0.1,#
                            sizeRange=c(-5,25),growthObjList=a1$growthObjects,cols=2:5)
growthModelComp
a1 <- growthModelComp(dff, makePlot = TRUE, regressionType="declineVar")#
addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(2,6,10),scalar=1,jitt=0.1,#
                            sizeRange=c(-5,25),growthObjList=a1$growthObjects,cols=2:5)
require(gls)
require(nlme)
require(gls)
a1 <- growthModelComp(dff, makePlot = TRUE, regressionType="declineVar")#
addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(2,6,10),scalar=1,jitt=0.1,#
                            sizeRange=c(-5,25),growthObjList=a1$growthObjects,cols=2:5)
a1 <- growthModelComp(dff, makePlot = F, regressionType="declineVar")
a1
a1 <- growthModelComp(dff, makePlot = TRUE, regressionType="declineVar")#
addPdfGrowthPic(respType = "sizeNext",sizesPlotAt=c(2,6,10),scalar=1,jitt=0.1,#
                            sizeRange=c(-5,25),growthObjList=a1$growthObjects,cols=2:5)
?predict.gls
a1
predict(a1[[1]][[1]])
predict(a1[[1]])
names(a1[[1]])
predict(a1[[2]][[1]])
predict(a1[[2]][[1]]@fit)
predict(a1[[2]][[1]]@fit,newd=data.frame(size=1:5,size2=1:5))
a1[[2]][[1]]@fit
a1[[2]][[1]]@fit$formula
a1[[2]][[1]]@fit
formula(a1[[2]][[1]]@fit)
Hossfeld.
Hossfeld
 par(mfrow=c(3,2),bty="l")#
#
    #species 1#
    grlist <- c(growModelsNeg$res1$growthObjects, growModelsNoNeg$res1$growthObjects,growModelsMech$res1$growthObject)#
    a1 <- compareTmatrices(dataf=dff[dff$spcode==sp.list[1],],#log="y",#
                           growthObjList=grlist[1:10],#
                           survObjList=list(survModels$res1$survObjects[[3]]),#
                           nBigMatrix=300,chosenSize=1500,makePlot=TRUE,#
                           makeLegend=TRUE,#
                           legendNames=c("sizeNext","incr","logincr","truncincr","Power","Monomolecular","Gompertz","Logistic3","Logistic4","Hossfeld"))#
    mtext(sp.names[1],side=3)#
#
    #species 2#
    grlist <- c(growModelsNeg$res2$growthObjects, growModelsNoNeg$res2$growthObjects,growModelsMech$res2$growthObject)#
    a2 <- compareTmatrices(dataf=dff[dff$spcode==sp.list[2],],#log="y",#
                           growthObjList=grlist[1:10],#
                           survObjList=list(survModels$res2$survObjects[[2]]),#
                           nBigMatrix=300,chosenSize=1500,makePlot=TRUE,#
                           makeLegend=TRUE,#
                           legendNames=c("sizeNext","incr","logincr","truncincr","Power","Monomolecular","Gompertz","Logistic3","Logistic4","Hossfeld"))#
    mtext(sp.names[2],side=3)#
#
#
    #species 3#
    grlist <- c(growModelsNeg$res3$growthObjects, growModelsNoNeg$res3$growthObjects,growModelsMech$res3$growthObject)#
    a3 <- compareTmatrices(dataf=dff[dff$spcode==sp.list[3],],#log="y",#
                           growthObjList=grlist[1:10],#
                           survObjList=list(survModels$res3$survObjects[[2]]),#
                           nBigMatrix=300,chosenSize=1500,makePlot=TRUE,#
                           makeLegend=TRUE,#
                           legendNames=c("sizeNext","incr","logincr","truncincr","Power","Monomolecular","Gompertz","Logistic3","Logistic4","Hossfeld"))#
    mtext(sp.names[3],side=3)
