fertMatrixNotSeed=F%*%U2*(as.numeric((ginv(diag(t(e)%*%U2)))))
mxNotSeed[i,]=colSums(fertMatrixNotSeed)
U2=U2%*%U
}
mxNotSeed=c(0,mxNotSeed[,1])
lifeTableNotSeed[,5]=mxNotSeed
lifeTableNotSeed[,7]=lifeTableNotSeed[,2]*lifeTableNotSeed[,5]
#Calculation of Keyfitz' Entropy (H):  (formula provided by Hal Caswell)
H=-t(lx)%*%log(lx)/sum(lx)
HNotSeed=-t(lxNotSeed)%*%log(lxNotSeed)/sum(lxNotSeed)
#	pdf(paste("F7. ",species[sp], "- mx.pdf",sep=""))
#	plot(mx[,1],type="l",col="red",lty=1,lwd=3,xlab="Age",ylab="Age-specific fecundity (fx)",xlim=c(1,max(lifespanCutoff,lifespanCutoffNotSeed)),ylim=c(0,max(mx[,1],mxNotSeed[,min(notSeed)])))
#	par(new=T)
#	plot(mxNotSeed[,min(notSeed)],type="l",col="pink",lty=2,lwd=3,xlab="Age",ylab="",xlim=c(1,max(lifespanCutoff,lifespanCutoffNotSeed)),ylim=c(0,max(mx[,1],mxNotSeed[,min(notSeed)])))
#	legend("bottomright",c("Starting as a seed","Starting as a first no-seed stage"),col=c("red", "pink"),lty=c(1,2))
#	dev.off()
#Calculations to get to Entropy (H)
##Broken, fix!
#r=log(lambda1)
#eminusrxlxmx=(exp(1)^(-r*c(1:lifespanCutoff)))*lx[,1]*mx[,1]
#logeminusrxlxmx=(log((exp(1)^(-r*c(1:lifespanCutoff)))*lx[,1]*mx[,1]))
#xeminusrxlxmx=c(1:lifespanCutoff)*eminusrxlxmx
#S=-sum(eminusrxlxmx*logeminusrxlxmx)
#What is Tc - Franco referred to it as simply "T"… is it my same T?
#	Tc=sum(xeminusrxlxmx)
#	H=S/Tc
#  eminusrxlxmxNotSeed=(exp(1)^(-r*c(1:lifespanCutoffNotSeed)))*lx[,1]*mx[,1]
#	logeminusrxlxmxNotSeed=(log((exp(1)^(-r*c(1:lifespanCutoffNotSeed)))*lx[,1]*mx[,1]))
#	xeminusrxlxmxNotSeed=c(1:lifespanCutoffNotSeed)*eminusrxlxmxNotSeed
#What exactly is "S"?
#	SNotSeed=-sum(eminusrxlxmxNotSeed*logeminusrxlxmxNotSeed)
#What is Tc - Franco referred to it as simply "T"… is it my same T?
#	TcNotSeed=sum(xeminusrxlxmxNotSeed)
#	HNotSeed=SNotSeed/TcNotSeed
#Plot all age-specific curves:
#plot(lx[,1],type="l",lty=2,lwd=2,ylim=c(0,1),ylab="Age-specific rate")
#points(qx,type="l",col=brown)
#points(dx,type="l",col=blue)
#PLOT mx ON THE OTHER AXIS!!
#points(mx[,1], type="l", lty=1, lwd=2,col="red")
#points(mx[,1]*lx[,1]*10, type="l", lty=3)
#plot(lxNotSeed[,1],type="l",lty=2,lwd=2,ylim=c(0,1),ylab="Age-specific rate",bty="c")
#points(qxNotSeed,type="l",lwd=2,col="brown")
#points(dxNotSeed,type="l",lwd=2,col="blue")
#par(new=TRUE)
#Plot(mxNotSeed[,1],type="l",lty=1,lwd=2,col="red",axes=FALSE)
#points(mxNotSeed[,1]*lxNotSeed[,1]*10,type="l",lty=3,lwd=2,col="orange")
#legend("top")
#Request by Jim Vaupel
#pdf(paste("qx & mx - ",speciesList[sp],".pdf",sep=""))
#par(mfrow=c(2,1), mar=c(5,4,2,0)+0.1)
#plot(qx,type="l",lty=1,lwd=2,xlim=c(1,length(qx)),xlab="Age(years)",ylab="Mortality (qx)",col="dark blue",main=speciesList[sp])
#points(qxNotSeed,type="l",lty=2,col="light blue")
#legend("topright",c("Start: seed","Start: seedling"),col=c("dark blue","light blue"), lty=c(1,2),cex=.5)
#plot(mx[,1],type="l",lty=1,lwd=2,xlim=c(1,length(qx)),xlab="Age (years)",ylab="Fecundity (mx)",col="red",main="",ylim=c(0,max(mx[,1],mxNotSeed[,min(notSeed)])))
#points(mx[,min(notSeed)],type="l",lty=2,col="pink")
#text(meanAge1stReprod,0,"*",col="red",cex=2)
#text(meanAge1stReprodNotSeed,0,"*",col="pink",cex=1.5)
#legend("topleft",c("Start: seed","Start: seedling"),col=c("red","pink"), lty=c(1,2),cex=.5)
#dev.off()
#Determine where lx falls below 50% and 10%
#lx1=lx[meanAge1stReprod:lifespanCutoff,1]
#lx50=lx10=rep(0,length(meanAge1stReprod:lifespanCutoff))
#for (i in 1:length(lx1)) {
#  if (lx1[1]*0.5<lx1[i]) lx50[i]=lx50[i] else lx50[i]=1
#  if (lx1[1]*0.1<lx1[i]) lx10[i]=lx10[i] else lx10[i]=1
#}
#  pdf(paste("qx & mx - ", speciesList[sp],".pdf",sep=""),width=7, height=7)
#  par(mar=c(5,4,4,5)+.1)
#  plot(qx1, lwd=2, type="l", col=rgb(1,0,0, alpha=1), xlab="Age", ylab="Mortality [q(x)]", ylim=c(0,max(qx1[meanAge1stReprod:length(qx1)])), xlim=c(round(meanAge1stReprod),lifespanCutoff), las=1, main=speciesList[sp])
#  points(qx1, ylim=c(0,max(mx[c(meanAge1stReprod:lifespanCutoff),1])), pch=19, col=rgb(1,0,0, alpha=0.3))
#  par(new=TRUE)
#  plot(mx[c(meanAge1stReprod:lifespanCutoff),1], lwd=2, type="l", col=rgb(0,1,0, alpha=1), xlab="", ylab="", xaxt="n",yaxt="n",ylim=c(0,max(mx[c(meanAge1stReprod:lifespanCutoff),1])))
#  points(mx[c(meanAge1stReprod:lifespanCutoff),1], ylim=c(0,max(mx[c(meanAge1stReprod:lifespanCutoff),1])), col=rgb(0,1,0, alpha=0.3))
#  axis(4, las=1)
#  mtext("Fertility [m(x)]",side=4,line=2.6)
#  abline(v=(min(which(lx50==1))), col="dark grey", lwd=2)
#abline(min(which(lx10==1), col="dark grey", lwd=2)
#  dev.off()
write.csv(lifeTable, paste(speciesList[sp]," - Lifetable.csv",sep=""))
write.csv(lifeTableNotSeed, paste(speciesList[sp]," - Lifetable notseed.csv",sep=""))
speciesList
sp=3
matDim=matDims[sp]
DataSP=subset(Dataset,Dataset[,1]==speciesList[sp])
#This reads the U (survival and change in stage), F (sexual reprod) and C (clonal 	reprod) matrices, following new nomenclature by Caswell:
U=as.matrix(DataSP[,5:(4+matDims[sp])])
F=as.matrix(DataSP[,10:(9+matDims[sp])])
#To make sure no survival of stage i is >1
u<-colSums(U)
if (max(u)>1) {survivalProblem=1} else {survivalProblem=0}
for (j in c(1:matDim)) {
if (u[j]>1) {U[,j]=U[,j]/u[j]}
}
#Total matrix A
A=U+F
#Retrieves info about the broad life stage categories
lifeStages=DataSP[,"classOrganized"]
#The calculation of age-based parameters drastically changes if one considers the 	"start of life" at the seed level. All age-related parame in this routine are calculated considering or not "seed" as the first "alive/active" stage:
notSeed=which(lifeStages!="seed")
#Add life stage descriptors to all matrices:
colnames(U)=colnames(F)=colnames(A)=lifeStages
rownames(U)=rownames(F)=rownames(A)=c(1:matDim)
#Extracting dominant eigenvalue of matrix A and calculating element sensitivities and elasticities
eig=eigen.analysis(A)
lambda1=eig$l
#Reproductive output (v)
v=reproductive.value(A)
v=v/sum(v)
#Stable Stage Distribution (w)
w=stable.stage(A)
w=w/sum(w)
# In order to plot things on a visible age scale, I take lifespan as defined by Forbis 	& Doak (AJB 2004) as my cutoff for all age-based parameters. Note that I re-calculate 	everything for seed (if it exists in the species) as the first stage or not:
#popVector=c(10000, rep(0, length(lifeStages)-1))
#lifespanLeftover=matrix(0,1000,1)
#for (i in 1:10000)	{
#	lifespanLeftover[i]=sum(popVector)
#	popVector=U%*%popVector
#}
#lifespanCutoff=min(which(lifespanLeftover<1))
lifespanCutoff=1000
lifeTable=matrix(NA,lifespanCutoff+1,8)
colnames(lifeTable)=c("x","lx","dx","qx","mx","Mean age 1st reprod","lxmx", "Initial N")
lifeTable[,1]=c(0:lifespanCutoff)
#popVectorNotSeed=c(rep(0,length(lifeStages)))
#popVectorNotSeed[min(notSeed)]=10000
#lifespanLeftoverNotSeed=matrix(0,10000,1)
#for (i in 1:10000)	{
#	lifespanLeftoverNotSeed[i]=sum(popVectorNotSeed)
#	popVectorNotSeed=U%*%popVectorNotSeed
#}
#lifespanCutoffNotSeed=min(which(lifespanLeftoverNotSeed<1))
lifespanCutoffNotSeed=1000
lifeTableNotSeed=matrix(NA,lifespanCutoffNotSeed+1,8)
colnames(lifeTableNotSeed)=c("x","lx","dx","qx","mx","Mean age 1st reprod", "lxmx","Initial N")
lifeTableNotSeed[,1]=c(0:lifespanCutoffNotSeed)
#	pdf(paste("F4. ",species[sp], "- % individuals lost.pdf",sep=""))
#	par(mfrow=c(1,1),las=1,mar=c(4.1,4.1,0,0),oma=c(0,0,.1,.1))
#	plot(lifespanLeftover,xlim=c(1,max(lifespanCutoff,lifespanCutoffNotSeed)),xlab="Annual projection", ylab="Percetange of dead individuals",lty=1,type="l",col="brown")
#	par(new=T)
#Without seeds
#	plot(lifespanLeftoverNotSeed, xlim=c(1,max(lifespanCutoff,lifespanCutoffNotSeed)),lty=2,type="l",col="green", xaxt="n",	yaxt="n",xlab="",ylab="")
#	legend("topright", c("Start: seed", "Start: seedling"), col=c	("brown", "green"), lty=c(1,2))
#	dev.off()
#Fundamental matrix		(Caswell 2001, p. 118)
N=solve(diag(matDim)-U)
colnames(N)=colnames(U)
rownames(N)=rownames(U)
lifespanStages=colSums(N)	#Caswell calls this meaneta
varLifespan=(2*diag(diag(N))-diag(rep(1,matDim)))%*%N-N*N #Caswell calls this vareta
SDLifespan=sqrt(varLifespan)
SDLifespanStages=colSums(SDLifespan)
CVLifespan=SDLifespan/N
lifespanStage1=lifespanStages[1]
lifespanNotSeed=lifespanStages[min(notSeed)]
#	pdf(paste("F5. ",species[sp], "- Stage specific Lifespan.pdf",sep=""))
#	barx=barplot(lifespanStages, xlab="Life cycle stage", ylab="Conditional longevity (years) ± S.D.", ylim=c(0,max(lifespanStages+SDLifespanStages)))
#	errorBar(barx,lifespanStages,SDLifespanStages)
#	dev.off()
#Age-specific survivorship (lx)
U2=U
lx=array(NA,dim=c(lifespanCutoff,matDim))
for (i in 1:lifespanCutoff) {
lx[i,]=colSums(U2%*%U)
U2=U2%*%U
}
lx=c(1,lx[1:(lifespanCutoff)])
lifeTable[,2]=lx
U2=U
lxNotSeed=array(NA,dim=c(lifespanCutoffNotSeed,matDim))
for (i in 1:lifespanCutoffNotSeed) {
lxNotSeed[i,]=colSums(U2%*%U)
U2=U2%*%U
}
lxNotSeed=c(1,lxNotSeed[1:(lifespanCutoffNotSeed)])
lifeTableNotSeed[,2]=lxNotSeed
#Proportion of individuals dying in each age (dx)
dx=c(rep(NA,lifespanCutoff), NA)
for (i in 1:lifespanCutoff) {
dx[i]=lx[i]-lx[i+1]
}
lifeTable[,3]=dx
dxNotSeed=c(rep(NA,lifespanCutoffNotSeed), NA)
for (i in 1:lifespanCutoffNotSeed) {
dxNotSeed[i]=lxNotSeed[i]-lxNotSeed[i+1]
}
lifeTableNotSeed[,3]=dxNotSeed
#Mortality rate (qx)
qx=dx/lx
lifeTable[,4]=qx
qxNotSeed=dxNotSeed/lxNotSeed
lifeTableNotSeed[,4]=qxNotSeed
#	pdf(paste("F6. ",species[sp], "- lx.pdf",sep=""))
#	par(mfrow=c(1,1),las=1,mar=c(4.1,4.1,0,0),oma=c(0,0,.1,.1))
#	plot(lx[,1], xlim=c(1,max(lifespanCutoff, lifespanCutoffNotSeed)),lty=1,lwd=2,col="brown",type="l",xlab="Years",ylab="Survivorship (lx)",ylim=c(0,1))
#	par(new=T)
#	plot(lxNotSeed[,min(notSeed)],xlim=c(1,max(lifespanCutoff,lifespanCutoffNotSeed)),lty=2,lwd=2,col="green",type="l",xaxt="n",yaxt="n",xlab= "",ylab="",ylim=c(0,1))
#	legend(3,1, c("Starting as a seed", "Starting as a first no-seed stage"), col=c	("brown", "green"), lty=c(1,2))
#	dev.off()
#Net reproductive rate (R0) (Caswell 2001, p. 126)
R=F%*%N
R0=Re(eigen(R)$values[1])
#Generation time (T) (Caswell 2001, p. 128)
T=log(R0)/log(lambda1)
#Probability of surviving to first reproductive event (Caswell 2001, p. 124)
Uprime=U
Uprime[,(lifeStages=="flow")]=0
Mprime=matrix(0,2,matDim)
for (i in 1:matDim) {
if (lifeStages[i]=="flow") Mprime[2,i]=1 else
Mprime[1,i]=1-u[i]
}
Bprime=Mprime%*%(ginv(diag(matDim)-Uprime))
prob1stReprod=Bprime[2,1]
prob1stReprodNotSeed=Bprime[2,min(notSeed)]
#Weight probabilities above by reproductive value following Horvitz' suggestion
prob1stReprodNormalized=prob1stReprod*v[1]
prob1stReprodNotSeedNormalized=prob1stReprodNotSeed*v[min(notSeed)]
#Age at first reproduction (Caswell 2001, p. 124)
D=diag(c(Bprime[2,]))
UprimeCond=D%*%Uprime%*%ginv(D)
expecTimeReprod=colSums(ginv(diag(matDim)-UprimeCond))
meanAge1stReprod=expecTimeReprod[1]
lifeTable[(round(meanAge1stReprod)+1):(lifespanCutoff+1),6]=1
meanAge1stReprodNotSeed=expecTimeReprod[min(notSeed)]
lifeTableNotSeed[(round(meanAge1stReprodNotSeed)+1):(lifespanCutoffNotSeed+1),6]=1
#Weight probabilities above by reproductive value following Horvitz' suggestion
meanAge1stReprodNormalized=meanAge1stReprod*v[1]
meanAge1stReprodNotSeedNormalized=meanAge1stReprodNotSeed*v[min(notSeed)]
#Age-specific fecundity (mx) (Caswell 2001, p. 120)
mx=array(0,dim=c(lifespanCutoff,matDim))
fertMatrix=array(0,dim=c(lifespanCutoff,matDim))
U2=U
e=matrix(rep(1,matDim))
for (i in 1:lifespanCutoff) {
fertMatrix=F%*%U2*(as.numeric((ginv(diag(t(e)%*%U2)))))
mx[i,]=colSums(fertMatrix)
U2=U2%*%U
}
mx=c(0,mx[,1])
lifeTable[,5]=mx
lifeTable[,7]=lifeTable[,2]*lifeTable[,5]
mxNotSeed=array(0,dim=c(lifespanCutoffNotSeed,matDim))
fertMatrixNotSeed=array(0,dim=c(lifespanCutoffNotSeed,matDim))
U2=U
for (i in 1:lifespanCutoffNotSeed) {
fertMatrixNotSeed=F%*%U2*(as.numeric((ginv(diag(t(e)%*%U2)))))
mxNotSeed[i,]=colSums(fertMatrixNotSeed)
U2=U2%*%U
}
mxNotSeed=c(0,mxNotSeed[,1])
lifeTableNotSeed[,5]=mxNotSeed
lifeTableNotSeed[,7]=lifeTableNotSeed[,2]*lifeTableNotSeed[,5]
#Calculation of Keyfitz' Entropy (H):  (formula provided by Hal Caswell)
H=-t(lx)%*%log(lx)/sum(lx)
HNotSeed=-t(lxNotSeed)%*%log(lxNotSeed)/sum(lxNotSeed)
#	pdf(paste("F7. ",species[sp], "- mx.pdf",sep=""))
#	plot(mx[,1],type="l",col="red",lty=1,lwd=3,xlab="Age",ylab="Age-specific fecundity (fx)",xlim=c(1,max(lifespanCutoff,lifespanCutoffNotSeed)),ylim=c(0,max(mx[,1],mxNotSeed[,min(notSeed)])))
#	par(new=T)
#	plot(mxNotSeed[,min(notSeed)],type="l",col="pink",lty=2,lwd=3,xlab="Age",ylab="",xlim=c(1,max(lifespanCutoff,lifespanCutoffNotSeed)),ylim=c(0,max(mx[,1],mxNotSeed[,min(notSeed)])))
#	legend("bottomright",c("Starting as a seed","Starting as a first no-seed stage"),col=c("red", "pink"),lty=c(1,2))
#	dev.off()
#Calculations to get to Entropy (H)
##Broken, fix!
#r=log(lambda1)
#eminusrxlxmx=(exp(1)^(-r*c(1:lifespanCutoff)))*lx[,1]*mx[,1]
#logeminusrxlxmx=(log((exp(1)^(-r*c(1:lifespanCutoff)))*lx[,1]*mx[,1]))
#xeminusrxlxmx=c(1:lifespanCutoff)*eminusrxlxmx
#S=-sum(eminusrxlxmx*logeminusrxlxmx)
#What is Tc - Franco referred to it as simply "T"… is it my same T?
#	Tc=sum(xeminusrxlxmx)
#	H=S/Tc
#  eminusrxlxmxNotSeed=(exp(1)^(-r*c(1:lifespanCutoffNotSeed)))*lx[,1]*mx[,1]
#	logeminusrxlxmxNotSeed=(log((exp(1)^(-r*c(1:lifespanCutoffNotSeed)))*lx[,1]*mx[,1]))
#	xeminusrxlxmxNotSeed=c(1:lifespanCutoffNotSeed)*eminusrxlxmxNotSeed
#What exactly is "S"?
#	SNotSeed=-sum(eminusrxlxmxNotSeed*logeminusrxlxmxNotSeed)
#What is Tc - Franco referred to it as simply "T"… is it my same T?
#	TcNotSeed=sum(xeminusrxlxmxNotSeed)
#	HNotSeed=SNotSeed/TcNotSeed
#Plot all age-specific curves:
#plot(lx[,1],type="l",lty=2,lwd=2,ylim=c(0,1),ylab="Age-specific rate")
#points(qx,type="l",col=brown)
#points(dx,type="l",col=blue)
#PLOT mx ON THE OTHER AXIS!!
#points(mx[,1], type="l", lty=1, lwd=2,col="red")
#points(mx[,1]*lx[,1]*10, type="l", lty=3)
#plot(lxNotSeed[,1],type="l",lty=2,lwd=2,ylim=c(0,1),ylab="Age-specific rate",bty="c")
#points(qxNotSeed,type="l",lwd=2,col="brown")
#points(dxNotSeed,type="l",lwd=2,col="blue")
#par(new=TRUE)
#Plot(mxNotSeed[,1],type="l",lty=1,lwd=2,col="red",axes=FALSE)
#points(mxNotSeed[,1]*lxNotSeed[,1]*10,type="l",lty=3,lwd=2,col="orange")
#legend("top")
#Request by Jim Vaupel
#pdf(paste("qx & mx - ",speciesList[sp],".pdf",sep=""))
#par(mfrow=c(2,1), mar=c(5,4,2,0)+0.1)
#plot(qx,type="l",lty=1,lwd=2,xlim=c(1,length(qx)),xlab="Age(years)",ylab="Mortality (qx)",col="dark blue",main=speciesList[sp])
#points(qxNotSeed,type="l",lty=2,col="light blue")
#legend("topright",c("Start: seed","Start: seedling"),col=c("dark blue","light blue"), lty=c(1,2),cex=.5)
#plot(mx[,1],type="l",lty=1,lwd=2,xlim=c(1,length(qx)),xlab="Age (years)",ylab="Fecundity (mx)",col="red",main="",ylim=c(0,max(mx[,1],mxNotSeed[,min(notSeed)])))
#points(mx[,min(notSeed)],type="l",lty=2,col="pink")
#text(meanAge1stReprod,0,"*",col="red",cex=2)
#text(meanAge1stReprodNotSeed,0,"*",col="pink",cex=1.5)
#legend("topleft",c("Start: seed","Start: seedling"),col=c("red","pink"), lty=c(1,2),cex=.5)
#dev.off()
#Determine where lx falls below 50% and 10%
#lx1=lx[meanAge1stReprod:lifespanCutoff,1]
#lx50=lx10=rep(0,length(meanAge1stReprod:lifespanCutoff))
#for (i in 1:length(lx1)) {
#  if (lx1[1]*0.5<lx1[i]) lx50[i]=lx50[i] else lx50[i]=1
#  if (lx1[1]*0.1<lx1[i]) lx10[i]=lx10[i] else lx10[i]=1
#}
#  pdf(paste("qx & mx - ", speciesList[sp],".pdf",sep=""),width=7, height=7)
#  par(mar=c(5,4,4,5)+.1)
#  plot(qx1, lwd=2, type="l", col=rgb(1,0,0, alpha=1), xlab="Age", ylab="Mortality [q(x)]", ylim=c(0,max(qx1[meanAge1stReprod:length(qx1)])), xlim=c(round(meanAge1stReprod),lifespanCutoff), las=1, main=speciesList[sp])
#  points(qx1, ylim=c(0,max(mx[c(meanAge1stReprod:lifespanCutoff),1])), pch=19, col=rgb(1,0,0, alpha=0.3))
#  par(new=TRUE)
#  plot(mx[c(meanAge1stReprod:lifespanCutoff),1], lwd=2, type="l", col=rgb(0,1,0, alpha=1), xlab="", ylab="", xaxt="n",yaxt="n",ylim=c(0,max(mx[c(meanAge1stReprod:lifespanCutoff),1])))
#  points(mx[c(meanAge1stReprod:lifespanCutoff),1], ylim=c(0,max(mx[c(meanAge1stReprod:lifespanCutoff),1])), col=rgb(0,1,0, alpha=0.3))
#  axis(4, las=1)
#  mtext("Fertility [m(x)]",side=4,line=2.6)
#  abline(v=(min(which(lx50==1))), col="dark grey", lwd=2)
#abline(min(which(lx10==1), col="dark grey", lwd=2)
#  dev.off()
write.csv(lifeTable, paste(speciesList[sp]," - Lifetable.csv",sep=""))
write.csv(lifeTableNotSeed, paste(speciesList[sp]," - Lifetable notseed.csv",sep=""))
#Clean memory
rm(list=ls(all=TRUE))
#Some of the functions used below need the package PopBio and MASS
require(popbio)
require(NCStats)
library(MASS)
dir="/Users/robertosalguero-gomez/Dropbox/Senescence MEE/Algae trajectories/"
setwd(dir)
Data=read.table("AlgaeControlMatrices.csv", header=T, sep=",", na.strings="NA", dec=".", strip.white=TRUE)    #colClasses(rep(as.character,3),rep(as.numeric(76)))
#Data[,1:3]=as.character(Data[,1:3])
head(Data)
DataSpecies=Data[,1:3]
#SpeciesList=DataSpecies[,1]
#SpeciesGrowthForm=DataSpecies[,2]
#SpeciesClassOrganized=DataSpecies[,3]
DataMatrices=Data[4:dim(Data)[2]]
MatrixCounter=DataMatrices[,1]
DataSpecies
Classes=c("seed","veg","flow","post","dorm")
startRows=which((SpeciesList)!="NA")	#Rows where each new species is located in the csv file
#Clean memory
rm(list=ls(all=TRUE))
#Some of the functions used below need the package PopBio and MASS
require(popbio)
require(NCStats)
library(MASS)
dir="/Users/robertosalguero-gomez/Dropbox/Senescence MEE/Algae trajectories/"
setwd(dir)
#Read file with species and projection matrices. Note that the matrices are split into U (transition probabilities), F (fertility per-capita contributions) and C (clonality per-capita contributions)
Dataset=read.table("AlgaeControlMatrices.csv", header=T, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
for (i in 1:dim(Dataset)[2]) {
if (i<4) Dataset[,i]=as.character(Dataset[,i]) else Dataset[,i]=as.numeric(Dataset[,i])
}
attach(Dataset)
labels(Dataset)
sapply(Dataset,mode)
#All output is saved here:
dir2=paste(dir,"Lifetables 3.19.12/",sep="")
setwd(dir2)
Classes=c("seed","veg","flow","post","dorm")
startRows=which(Dataset[,"classNumber"]==1)
speciesList=Dataset[startRows,"species"]	#Name of species in the file
matDims=abs(startRows-c((startRows[-1]),nrow(Dataset)+1))  #Dimensions of the matrices
speciesList
install.packages("rj")
install.packages(c("rj", "rj.gd"), repos="http://download.walware.de/rj-1.0")
citation(\)
citation()
rm(list=ls(all=TRUE))
source('~/Desktop/hyperDataCovSubset.R')
library.packages("IPMpack")
install.packages("IPMpack")
data(crytaDataCovSubset)
getwd()
load("Rpackages")
for (p in setdiff(packages, installed.packages()[,"Packages"]))
.
for (p in setdiff(packages, installed.packages()[,"Package"]))
.
for (p in setdiff(packages, installed.packages()[,"Package"]))
)
Rpackages
load(Rpackages)
load("Rpackages")
fix(packages)
fix(packages)
for (p in setdiff(packages, installed.packages()[,"Package"]))
fix(packages)
#Clean memory
rm(list=ls(all=TRUE))
#Load IPMpack (Make sure you are working with version 1.3!)
library(IPMpack)
#Information on the subset of information made available in IPMpack 1.3 can be accessed through the help manual for "hyperDataCovSubset"
data(hyperDataCovSubset)
help(hyperDataCovSubset)
#This file is also available in your IPM ESA dropbox, so you can upload it here (commented out for convenience)
#dir<-"/Users/robertosalguero-gomez/Dropbox/IPM ESA workshop/Datasets/"
#setwd(dir)
#d<-read.table("hyperDataCovSubset.csv",sep=";",header=T)
#Let's use this dataset for our exercises
d <- hyperDataCovSubset
#Due to the sampling design described in the help manual, here we consider only individual with certain recruit origin:
d <- subset(d,is.na(d$size)==FALSE | d$ontogenyNext==1)
#Side experiments carried out by Quintana-Ascencio and Menges estimated the following vital rates as size- and year-independent:
#Number of seeds produced per fruit to be:
fec2<-13.78
#Probability of seedling survival half a year after germinating, corresponding to the next annual census
fec4 <- 0.14
#A look could be done to build individual IPMs for each of the years (1994 thrhough 2000) available in this dataset subset. However, for simplicity reasons we are going to run it first one at a time. Define the year of interest below. For instance, "year <- 1994". Your IPM will describe the population dynamics in Hypericum cumulicola from that chose year to the next. Note that the dataset goes from 1994 to 2000, so you can choose any year between 1994 and 1999:
year <- 1994
d1 <- subset(d,d$year==year)
#In this case the population had recently undergone a natural fire
TSLF <- d1$TSLF[1]
#Side-experiments described in Quintana-Ascencio et al Cons Biol 2003 revealed that the following vital rates depend only on the TSLF (time since last fire) only:
#Probability of seedling establishment
if (TSLF<29) {fec3 <- 0.001 -0.0001*TSLF + 0.000004*TSLF^2} else {fec3 <- 0.001 -0.0001*28 + 0.000004*28^2}
#Probability of a seed going into the seed bank
if (TSLF<29) {goSB <- 0.073 + 0.028*TSLF -0.002*TSLF^2 + 0.00003614*TSLF^3} else {goSB <- 0.073 + 0.028*28-0.002*28^2 + 0.00003614*28^3}
#Probability of a seed staying in the seed bank
if (TSLF<7) {staySB <- 0.636} else {if (TLSF<21) {staySB <- 0.824} else {staySB <- 0.672}}
#A simple re-organization of the data, getting rid of non-critical information
d1 <- d1[,c("surv","size","sizeNext","fec0","fec1")]
#The following states the continuous (max height of individual plant) part of the IPM. Note that the IPM to be constructed here contains a discrete stage: seedbank.
d1$stage<-d1$stageNext<-"continuous"
d1$stage[is.na(d1$size)]<-NA
#If individual did not survive, it is labelled as dead to t+1.
d1$stageNext[d1$surv==0]<-"dead"
#Adds probability of seeds going into (continuous -> seedbank), staying (seedbank -> seedbank) and leaving (continuous -> seedbank) the discrete stage.
d1$number<-1
sb1<-data.frame(stage=c("seedbank","seedbank","continuous"),stageNext=c("seedbank","continuous","seedbank"),surv=1,size=NA,sizeNext=NA,fec0=NA,fec1=NA,number=c(staySB,(1-staySB)*fec3*fec4,1))
d1<-rbind(d1,sb1)
d1$stage<-as.factor(d1$stage)
d1$stageNext<-as.factor(d1$stageNext)
soComparison <- survModelComp(d1,expVars = c(surv~1, surv~size, surv~size + size2), testType = "AIC",makePlot = T)
#Choose the formula with lowest AIC value in the previous plot
soComparison <- survModelComp(d1,expVars = c(surv~1, surv~size, surv~size + size2), testType = "AIC",makePlot = T)
#Choose the formula with lowest AIC value in the previous plot
soComparison <- survModelComp(d1,expVars = c(surv~1, surv~size, surv~size + size2), testType = "AIC",makePlot = T)
#Choose the formula with lowest AIC value in the previous plot
getwd()
so <- makeSurvObj(d1, Formula = surv~size+size2)
picSurv(d1, so)
e + size2), testType="AIC",
makePlot=T)
addPdfGrowthPic(respType = "sizeNext", sizesPlotAt = c(10, 35, 60), scalar = 1, jitt = 0.1, sizeRange = c(min(d1$size,
na.rm=T),max(d1$size, na.rm=T)), growthObjList = goComparison$growthObjects, cols = 2:5)
goComparison <- growthModelComp(d1,expVars = c(sizeNext~1, sizeNext~size, sizeNext~size + size2), testType="AIC",
makePlot=T)
addPdfGrowthPic(respType = "sizeNext", sizesPlotAt = c(10, 35, 60), scalar = 1, jitt = 0.1, sizeRange = c(min(d1$size,
na.rm=T),max(d1$size, na.rm=T)), growthObjList = goComparison$growthObjects, cols = 2:5)
go <- makeGrowthObj(d1, Formula=sizeNext~size)
picGrow(d1, go)
abline(a=0, b=1, lty=2, col="red")
#
fo <- makeFecObj(d1, Formula=c(fec0~size, fec1~size),
Family=c("binomial", "poisson"),
Transform=c("none", "none"),
meanOffspringSize=mean(d1[is.na(d1$size)==TRUE & is.na(d1$sizeNext)==FALSE,"sizeNext"]),
sdOffspringSize=sd(d1[is.na(d1$size)==TRUE & is.na(d1$sizeNext)==FALSE,"sizeNext"]),
fecConstants=data.frame(fec2=fec2,fec3=fec3,fec4=fec4),
offspringSplitter=data.frame(seedbank=goSB,continuous=(1-goSB)),
offspringTypeRates=data.frame(seedbank=c(1,1,1,0,0),
continuous=rep(1,5),
row.names=c("fec0","fec1","fec2","fec3","fec4")))
dto <- makeDiscreteTrans(d1)
dummy <- as.matrix(fo@offspringRel$coefficients[1])
dimnames(dummy) <- list(1, "seedbank")
dto@meanToCont <- as.matrix(dummy, dimnames=c(1, "seedbank"))
dummy <- as.matrix(fo@sdOffspringSize)
dimnames(dummy) <- list(1, "seedbank")
dto@sdToCont <- as.matrix(dummy, dimnames=c(1, "seedbank"))
dto@discreteSurv[1, 1] <- staySB+(1-staySB)*fec3*fec4
Tmatrix <- createIPMTmatrix(growObj=go, survObj=so, discreteTrans=dto, minSize=0, maxSize=80, nBigMatrix=81,
correction="constant")
Fmatrix <- createIPMFmatrix(fecObj=fo, minSize=0, maxSize=80, nBigMatrix=81, correction="constant")
TmatrixContinuousOnly <- createIPMTmatrix(growObj=go, survObj=so, minSize=0, maxSize=80, nBigMatrix=81,
correction="constant")
diagnosticsTmatrix(TmatrixContinuousOnly, growObj=go, survObj=so, dff=d1, correction="constant")
IPM <- Tmatrix+Fmatrix
maxSize=82
plotsurfR<-function(M,meshpts,upper,lower) {
q<-sum(meshpts<=maxSize);
filled.contour(meshpts[1:q],meshpts[1:q],M[1:q,1:q], zlim=c(upper,lower),
xlab="size at time t", ylab="size at time t+1", color=heat.colors, nlevels=20, cex.lab=1.5);
return(0);
}
plotsurfR(t(IPM), Tmatrix@meshpoints, 0.02, 0)
title("Kernel")
maxSize=82
plotsurfR<-function(M,meshpts,upper,lower) {
q<-sum(meshpts<=maxSize);
filled.contour(meshpts[1:q],meshpts[1:q],M[1:q,1:q], zlim=c(upper,lower),
xlab="size at time t", ylab="size at time t+1", color=heat.colors, nlevels=20, cex.lab=1.5);
return(0);
}
plotsurfR(t(IPM), Tmatrix@meshpoints, 0.02, 0)
plotsurfR(t(IPM), Tmatrix@meshpoints, 0.02, 0)
plotsurfR(t(IPM), Tmatrix@meshpoints, 0.02, 0)
title("Kernel")
elasticity <- elas(IPM)
plotsurfR(t(elasticity),Tmatrix@meshpoints,0.0005,0)
title("Elasticity")
sensitivity <- sens(IPM)
plotsurfR(t(sensitivity),Tmatrix@meshpoints,0.05,0)
title("Sensitivity")
